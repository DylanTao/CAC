{
    "id": "security",
    "title": "Passive Inference in Security",
    "content": "",
    "summary": "",
    "children": [
        {
            "id": "zleaks",
            "title": "zleaks",
            "content": "",
            "summary": "ZLeaks is a tool that can identify in-home devices or events from encrypted Zigbee traffic by inferring a single application layer command in the event's traffic and exploiting the device's periodic reporting pattern and interval. The study highlights the trade-off between designing a low-power, low-cost wireless network and achieving privacy guarantees. The tool was evaluated on 19 unique Zigbee devices across several categories and 5 popular smart hubs in three different scenarios, and was able to identify unknown events and devices using command inference approach with 83.6% accuracy, automatically extract device's reporting signatures, determine known devices using the reporting signatures with 99.8% accuracy, and identify APL commands in a public capture with 91.2% accuracy.",
            "children": [
                {
                    "id": "zleaks.abstract",
                    "title": "Abstract",
                    "content": "based Smart Homes\nNarmeen Shafqat1 \u0000[0000\u00000002\u00007562\u00001093], Daniel J. Dubois1, David\nCho\u000bnes1[0000\u00000001\u00007825\u00007226], Aaron Schulman2[0000\u00000002\u00009280\u00008925], Dinesh\nBharadia2[0000\u00000002\u00003518\u00004722], and Aanjhan\nRanganathan1[0000\u00000003\u00000464\u00005861]\n1Northeastern University, Boston, MA, USA\nfshafqat.n, d.dubois, d.choffnes, aanjhan g@northeastern.edu\n2University of California San Diego (UCSD), California, USA\nschulman@cs.ucsd.edu, dinesh@ucsd.edu\nAbstract. Zigbee is an energy-e\u000ecient wireless IoT protocol that is\nincreasingly being deployed in smart home settings. In this work, we an-\nalyze the privacy guarantees of Zigbee protocol. Speci\fcally, we present\nZLeaks, a tool that passively identi\fes in-home devices or events from the\nencrypted Zigbee tra\u000ec by 1) inferring a single application layer (APL)\ncommand in the event's tra\u000ec, and 2) exploiting the device's periodic\nreporting pattern and interval. This enables an attacker to infer user's\nhabits or determine if the smart home is vulnerable to unauthorized en-\ntry. We evaluated ZLeaks' e\u000ecacy on 19 unique Zigbee devices across\nseveral categories and 5 popular smart hubs in three di\u000berent scenarios;\ncontrolled RF shield, living smart-home IoT lab, and third-party Zigbee\ncaptures. We were able to i) identify unknown events and devices (with-\nout a-priori device signatures) using command inference approach with\n83.6% accuracy, ii) automatically extract device's reporting signatures,\niii) determine known devices using the reporting signatures with 99.8%\naccuracy, and iv) identify APL commands in a public capture with 91.2%\naccuracy. In short, we highlight the trade-o\u000b between designing a low-\npower, low-cost wireless network and achieving privacy guarantees. We\nhave also released ZLeaks tool for the bene\ft of the research community.",
                    "summary": "Researchers from Northeastern University and UCSD have developed a tool called ZLeaks that can passively identify in-home devices or events from encrypted Zigbee traffic by inferring a single application layer command in the event's traffic and exploiting the device's periodic reporting pattern and interval. ZLeaks was evaluated on 19 unique Zigbee devices across several categories and 5 popular smart hubs in three different scenarios, and was able to identify unknown events and devices using command inference approach with 83.6% accuracy, automatically extract device's reporting signatures, determine known devices using the reporting signatures with 99.8% accuracy, and identify APL commands in a public capture with 91.2% accuracy. The study highlights the trade-off between designing a low-power, low-cost wireless network and achieving privacy guarantees.",
                    "children": []
                },
                {
                    "id": "zleaks.1",
                    "title": "1 Introduction",
                    "content": "1 Introduction\nSmart home products (e.g., bulbs, outlets, sensors, etc.) allow users to control\nand monitor their smart home's environment wirelessly, but unfortunately, pose\na signi\fcant risk to users' privacy. Prior studies have demonstrated that by in-\ntercepting the IP tra\u000ec of a smart home, the attacker can determine in-home\ndevices [1,2,3], events [4,5], and user's habits [6]. In practice, these attacks are\ndi\u000ecult to carry out, as the attacker must \fnd a vulnerability to capture the\nuser's IP network tra\u000ec (e.g., by gaining root access to the home router). Yet,2 N. Shafqat et al.\nthere exists an easy privacy violation attack, i.e., simply sni\u000eng the Internet of\nThings (IoT) wireless protocol (e.g., Zigbee) transmissions that are unintention-\nally emitted to up to hundreds of feet. Although the IoT tra\u000ec is encrypted to\nprevent eavesdropping, researchers recently showed that the attacker can still\nidentify events using a-priori device signatures [7,8] and infer a few encrypted\nZigbee (Network layer) commands by exploiting the payload lengths [9].\nIn this work, we analyze the privacy guarantees of one of the most popular IoT\nwireless protocols, Zigbee [10], that is increasingly being used in smart hubs such\nas Amazon Echo Plus, Samsung SmartThings, and Philips Hue. With the launch\nof more than 500 new Zigbee-certi\fed devices in 2020 alone and the expected\nsale of nearly four billion Zigbee chipsets by 2023 [11], Zigbee continues to be\nthe preferred choice of device manufacturers.\nOur key insight is that design optimizations incorporated into Zigbee to en-\nable low-latency communication on low-cost resource-constrained devices funda-\nmentally leak information, e.g., to keep the frame length small, Zigbee performs\nencryption transformation [10] on AES encrypted output to match the message\nlength. This enables an eavesdropper to exploit unpadded payload lengths and\ndiscrepancies in tra\u000ec metadata to infer every encrypted network layer (NWK)\nand application layer (APL) command. Moreover, to prevent device timeout, Zig-\nbee devices periodically report attributes like battery level, temperature, etc., to\nthe smart hub. The distinct reporting patterns and intervals inadvertently serve\nas device \fngerprints. In this work, we exploit device's unique reporting patterns\nand the possibility of inferring APL commands to passively determine devices\nand events in the target network. Speci\fcally, we make following contributions.\nDevice and Event Identi\fcation using Inferred APL Command:\nWe demonstrate that the event tra\u000ec of a device always includes at least one\nfunctionality-speci\fc APL command (such as Door Lock/Unlock ), which alone\nspeci\fes the triggered event (i.e., lock/unlock) and the functional device type\n(i.e., door lock). Zigbee Cluster Library (ZCL) speci\fcation [12] inherently leaks\ninformation about all such APL commands. We attempt to infer a single func-\ntionality speci\fc APL command in the encrypted event tra\u000ec to determine event\nand device type and combine manufacturer's identity obtained from the Orga-\nnizationally Unique Identi\fer (OUI) of the device's MAC address to identify a\nparticular Zigbee device. Unlike prior works [7,8], this approach does not require\ndevice's event signatures and can even identify unknown events and devices3.\nIn practice, inferring functionality-speci\fc APL commands is extremely chal-\nlenging, and so far, no study has attempted it. This is because the metadata of\nfunctionality-speci\fc APL commands is immensely similar to a hundred other\ngeneric APL commands. Few APL commands are also manufacturer con\fg-\nurable, which prevent us from exploiting only the payload length, packet di-\nrection, and radius (hops) to infer APL commands using prior NWK command\ninference approach [9]. We utilize frame format guidelines [12] to identify all pos-\nsible APL commands with payload lengths overlapping with the functionality-\nspeci\fc APL commands and their response commands (if any), e.g., door unlock\n3Zigbee Devices not previously observed, i.e., no a-priori access to their tra\u000ec.ZLeaks: Passive Inference Attacks on Zigbee based Smart Homes 3\nrequest and response . The discrepancies in the tra\u000ec's metadata, together with\nthe device's logical type (electricity-powered or battery-powered), are used to\nconstruct inference rules for each target functionality-speci\fc APL command.\nDevice Identi\fcation using Periodic Reporting Patterns: Zigbee\ndevices periodically report attributes to the smart hub. We exploit reporting\npatterns and intervals to create unique device \fngerprints. This approach is use-\nful for identifying a known device with unpatched vulnerability (e.g., to spread\nmalware) in the Zigbee network, which has minimal user activity. Unlike prior\nworks [7,8] that analyze Zigbee tra\u000ec generated due to event occurrence only:\nthis approach can identify devices even when no event is triggered. Given that\nevery device's current consumption varies based on its communication pattern\nand hardware, the periodic reporting time is not trivial to modify as it directly\nimpacts device certi\fcation requirement of minimum 2-years battery life [13].\nAutomating event and device identi\fcation with ZLeaks tool: We\ndeveloped a comprehensive privacy analysis tool for Zigbee protocol, named\nZLeaks [14], that automates the aforementioned identi\fcation techniques. ZLeaks\ntakes the Zigbee tra\u000ec as input and passively determines events and devices in\nthe smart home. It can also extract devices' reporting signatures automatically.\nWe experimentally evaluated ZLeaks on by far the most extensive device\nset used in privacy analysis of Zigbee protocol including 5 popular smart hubs\n(SmartThings, Amazon Echo Plus, Philips Hue, OSRAM Lightify, and Sengled)\nand 27 commercial o\u000b-the-shelf Zigbee devices, out of which 19 devices were\nunique. The experiments were performed in 1) an isolated RF shield and 2) a liv-\ning smart-home \\Mon(IoT)r Lab\" [15] with multiple IoT and non-IoT networks\noperating simultaneously. Furthermore, we validated the \fndings on third-party\ncapture \fles available on Wireshark [16] and Crawdad [17] forums. Our results\nindicate that ZLeaks identi\fed event and device information using inferred APL\ncommands with 83.6% accuracy and devices using reporting patterns with 99.8%\naccuracy. Also, we inferred functionality-speci\fc APL commands in a public Zig-\nbee capture, using our command inference rules, with 91.2% accuracy.",
                    "summary": "Zigbee wireless protocol used in smart home devices has design optimizations that leak information, allowing eavesdroppers to passively determine devices and events in the target network. The reporting patterns and intervals of Zigbee devices serve as device fingerprints, and the Zigbee Cluster Library specification inherently leaks information about functionality-specific application layer (APL) commands. ZLeaks, a privacy analysis tool for Zigbee protocol, was developed to automate device and event identification using inferred APL commands and reporting patterns. Experimental evaluation of ZLeaks on 5 popular smart hubs and 27 commercial off-the-shelf Zigbee devices showed 83.6% accuracy in identifying event and device information using inferred APL commands and 99.8% accuracy in identifying devices using reporting patterns.",
                    "children": []
                },
                {
                    "id": "zleaks.2",
                    "title": "2 Background and Motivation",
                    "content": "2 Background and Motivation",
                    "summary": "This paper presents an approach to passively identify Zigbee devices and events in a smart home network using a wireless Zigbee sniffer. The attacker analyses the captured Zigbee traffic to identify the events and devices using either command inference or periodic reporting patterns. The unencrypted IEEE 802.15.4 frames in the Zigbee traffic also provide negligible information regarding the devices and events, making it extremely challenging to trace the communicating nodes.",
                    "children": [
                        {
                            "id": "zleaks.2.1",
                            "title": "2.1 Zigbee Overview",
                            "content": "2.1 Zigbee Overview\nZigbee is one of the most popular low-cost, low-power, wireless protocols specif-\nically designed for battery-powered applications in smart ecosystems such as\nsmart homes and industries. Zigbee is built on top of the low data-rate IEEE\n802.15.4 wireless personal area networking (PAN) standard and implements the\nphysical (PHY) and medium access control (MAC) layers as de\fned by the IEEE\nstandard. Most commercial Zigbee devices operate at a data rate of 250 kbps in\nthe 2.4 GHz band (divided into 16 channels, each 5 MHz apart). Some Zigbee\ndevices also operate in the unlicensed frequency bands of 784, 868, and 915 MHz.\nNetwork Architecture: Zigbee supports both centralized and distributed net-\nwork architectures. Centralized networks comprise of three logical device types;4 N. Shafqat et al.\nIEEE \n802.15.4\nWrite \nAttributes\nRead \nAttributes\nDoor \nLock/ \nUnlock\nOn/ \nOff. \netc..\nLink \nStatus, \nRoute \nReply\nRoute \nRecord, \nLeave. \netc..\nData \nRequest, \nOrphan \nNotification, \nBeacon \nRequest, \nMAC \nACK. \netc..\nCommands\nZigbee \nAlliance\nApplication \n(APL) \nLayer  \nMedia \nAccess \nControl \n(MAC) \nlayer\nPhysical \n(PHY) \nLayer \nNetwork \n(NWK) \nLayer\nApp \nSupport \nSublayer \n(APS)\nApplication \nFramework\nZigbee\nDevice\nObject \n(ZDO)\nFig. 1. Zigbee's Protocol Stack comprising of PHY, MAC, NWK and APL layers\nZigbee coordinator (ZC), Zigbee router (ZR), and Zigbee end-device (ZED),\nwhile the distributed networks have ZR and ZED only. ZEDs do not route tra\u000ec\nand may sleep to conserve battery, making them appropriate for battery-powered\ndevices (e.g., sensors, door locks). ZRs are responsible for routing tra\u000ec between\nnodes and storing messages intended for ZEDs until they are requested. Every\nZigbee network has one ZC that is responsible for network formation, issuing\nnetwork identi\fers, and logical network addresses. ZC also acts as a trust center\nto authenticate new nodes and distribute keys. ZRs and ZCs are powered devices\n(e.g., bulbs, smart hubs) and do not sleep during the network's lifetime. Besides,\nZigbee supports connectivity in star, mesh, and tree topologies. Zigbee does not\nimplement MAC address randomization. Each Zigbee node has a manufacturer-\nassigned 64-bit MAC (extended) address that is mapped to a unique 16-bit\nnetwork (logical) address by the ZC during device pairing. The logical address\nis used for routing, while the extended address is used for authentication.\nZigbee Protocol Stack (Figure 1): Zigbee standard [10] de\fnes the function-\nalities of the Network and Application layers. The Network layer is responsible\nfor network formation and management, routing and address allocation. There\nare 12 NWK commands, such as Link Status, Route Record, Route Reply , etc.\nZigbee's Application layer comprises of Application Support (APS) sublayer,\nZigbee Device Object (ZDO), and Application Framework. APS sublayer main-\ntains binding tables and address mappings, and ZDO implements the device\nin one of the three logical roles (ZC, ZR, or ZED). The application framework\no\u000bers pre-de\fned pro\fles (e.g., home automation, health care, etc.) and func-\ntional domains called clusters (e.g., lighting, security, etc.) for end-manufacturers\nto support device interoperability. Broadly, APL commands are either function-\nality speci\fc or generic (such as Read Attributes, Report Attributes etc.).\nSecurity and Privacy: Zigbee uses 128-bit AES encryption to provide payload\ncon\fdentiality and message authentication. The standard also has the provision\nfor integrity-protection using 128-bit AES CCM* block cipher and replay protec-\ntion using a 32-bit frame counter. Each Zigbee device has a pre-installed global\ntrust center link key, which is used if the manufacturer does not provide any\nunique link key or QR install code. The Network (encryption) key is randomly\ngenerated by ZC during network formation and is common to all Zigbee nodes.ZLeaks: Passive Inference Attacks on Zigbee based Smart Homes 5\nIP \nTraffic\nZigbee \nTraffic\nZigbee \nPAN\nZC\nZEDs\nZRs\nCloud\nSmart \nApp\nInternet\nFig. 2. Communication Flow in a Zigbee Home Network.",
                            "summary": "Zigbee is a popular low-cost, low-power protocol designed for battery-powered applications in smart ecosystems. It is built on top of IEEE 802.15.4 and operates at 250 kbps in the 2.4 GHz band. Zigbee supports both centralized and distributed network architectures, with Zigbee coordinator, Zigbee router, and Zigbee end-device. Zigbee uses 128-bit AES encryption for payload confidentiality and message authentication, with provisions for integrity-protection and replay protection. ",
                            "children": []
                        },
                        {
                            "id": "zleaks.2.2",
                            "title": "2.2 System and Threat Model",
                            "content": "2.2 System and Threat Model\nWe assume a Zigbee home network, similar to Figure 2, where a smart hub\n(ZC) is paired with several popular Zigbee devices (ZRs and ZEDs). The hub\nis connected to an IP gateway to update devices' states on the cloud and the\nuser's smart app. The smart home's occupants carry out routine activities and\ncan control devices via the smart app from virtually anywhere. We assume that a\npassive attacker is collecting Zigbee transmissions using a wireless Zigbee sni\u000ber\nfrom within the wireless communication range of the victim network. We use TI\nCC2531 Zigbee sni\u000ber [18], equipped with the standard omnidirectional antenna,\nto receive Zigbee transmissions at a distance of 20 m4. The attacker does not\nneed access to the smart app or physical presence inside the smart home; he can\neven implant a Zigbee sni\u000ber nearby and observe the tra\u000ec remotely.\nThe attacker analyses the captured Zigbee tra\u000ec to passively identify the\nevents and devices using either command inference or periodic reporting pat-\nterns, irrespective of the network or link keys, device's QR code, or speci\fc\nevents like device pairing or rejoining, which aid the attacker to extract the Net-\nwork key. In other words, we assume a fully operational Zigbee network with\nsubject devices (door locks, bulbs, outlets, and various types of sensors) con\fg-\nured and commissioned a-priori. The attacker only requires some background\nknowledge of the Zigbee standard. There is no need to collect event signatures\nfor each device. Only when a speci\fc device is required to be identi\fed in the\ntarget smart home with zero user activity, the attacker needs the device's re-\nporting signatures. Note that Zigbee packets are exchanged between the hub\nand end-devices only; so even having access to the user's smart app and reverse\nengineering it would not leak information regarding the Zigbee commands.\nChallenges: The AES-128 algorithm used by Zigbee has proven confusion and\ndi\u000busion properties and prevents eavesdropping. The attacker can resort to using\nthe existing NWK command inference scheme [9] based on payload size, radius,\nand actively determined logical device type to infer NWK frames. Unfortunately,\nthe events and device information is embedded in APL commands where the\nradius is insigni\fcant. Also, unlike the 12 NWK commands, which have de\fned\npayload lengths [10], there are more than a hundred APL commands, most of\n4Range can be extended with a high gain directional antenna6 N. Shafqat et al.\nPerform \nNetwork \nMapping\nInfer \nfunc \nspecific \nAPL \ncommand, \nevent \nand \ndevice \ntype \nusing \nproposed \nrules\nDo \nthe \nperiodic \nreporting \npattern \n& \ninterval \ncorrelate \nwith \nany \nexisting \nsignature?\nIs \nMAC   \nOUI \nreal?\nNo\nEvent \noccurs?\nDevice \nIdentified\nYes\nYes\nDevice \ntype \n+ \nevent \nidentified\nDevice \n+\nevent \nidentified\nYes\nSniff \nZigbee \ntraffic\nNo\nNo\nFig. 3. Inference Strategy: If event occurs, infer functionality speci\fc APL command\nand combine MAC identi\fer to identify the device and event. If there's no event,\nidentify device using periodic signature correlation. If it fails, wait for an event.\nwhich are manufacturer con\fgurable (e.g., Report Attributes, Read Attributes,\netc.). Hence there exist several overlappings at each payload length. These factors\nmake the existing approach [9] insu\u000ecient to passively infer APL commands.\nThe unencrypted IEEE 802.15.4 frames in the Zigbee tra\u000ec also provide\nnegligible information regarding the devices and events, e.g., the frequently ex-\nchanged IEEE 802.15.4 ACK does not mention network or MAC address for the\nsource or destination, and the incremental frame sequence numbers roll back\nafter 256, making it extremely challenging to trace the communicating nodes.\nMoreover, existing research studies rely on a-priori event signatures for the\nidenti\fcation of events [7,8]. In practice, user events are infrequent, e.g., during\nnighttime. In this idle state, the devices and hub exchange periodic reports only\nand do not leak any device information. Hence, identifying a device without event\nsignatures or in the absence of events are still open problems for the attacker.",
                            "summary": "This paper presents an approach to passively identify Zigbee devices and events in a smart home network using a wireless Zigbee sniffer. The system assumes a fully operational Zigbee network with devices configured and commissioned a-priori. The attacker analyses the captured Zigbee traffic to identify the events and devices using either command inference or periodic reporting patterns. The AES-128 algorithm used by Zigbee has proven confusion and diffusion properties and prevents eavesdropping, but the attacker can resort to using the existing NWK command inference scheme based on payload size and radius to infer NWK frames. The unencrypted IEEE 802.15.4 frames in the Zigbee traffic also provide negligible information regarding the devices and events, making it extremely challenging to trace the communicating nodes. Existing research studies rely on a-priori event signatures for the identification of events, but in practice, user events are infrequent. Hence, identifying a device without event signatures or in the absence of events are still open problems for the attacker.",
                            "children": []
                        }
                    ]
                },
                {
                    "id": "zleaks.3",
                    "title": "3 Passive Inference Attacks on Zigbee",
                    "content": "3 Passive Inference Attacks on Zigbee",
                    "summary": "Passive inference attacks on Zigbee can invade smart homes' privacy by determining Zigbee devices, triggered events, and encrypted commands exchanged in the home. A low-cost wireless Zigbee receiver can be leveraged to identify and tune to the target network's communication frequency channel and sniff the Zigbee traffic. The attack can identify unknown devices and events without collecting event signatures and can infer the device using command inference. Zigbee devices exhibit unique event patterns, and the inference algorithm utilizes APL frame formats to devise inference rules for functionality-specific APL commands. Zigbee devices use varied power consumption to comply with the Zigbee certification requirement of minimum 2 years battery life, allowing for unique device fingerprints to be devised and devices to be identified even during office hours.",
                    "children": [
                        {
                            "id": "zleaks.3.1",
                            "title": "3.1 Attack Overview",
                            "content": "3.1 Attack Overview\nAs illustrated in Figure 3, our fundamental goal is to invade the smart home's\nprivacy by determining Zigbee devices, triggered events, and encrypted com-\nmands exchanged in the home. We use a low-cost wireless Zigbee receiver,\nTI-CC2531 [18], to identify and tune to the target network's communication\nfrequency channel and sni\u000b the Zigbee tra\u000ec. To maximize the amount of in-\nformation extracted from the sni\u000bed tra\u000ec, we \frst perform network mapping,\nwhereby the logical device type of each node (ZC, ZR, or ZED) is determined.\nIf an event occurs, we use proposed inference rules (Section 3.3) to identify\nthe functionality-speci\fc APL command in the event's tra\u000ec, which further\nreveals event and device type. The manufacturer is revealed from the device's\nMAC identi\fer. Speci\fcally, we exploit the device's logical type and metadata\nvariations in APL commands, that stem from power consumption optimizations\nincorporated into Zigbee. Unlike prior works [7,8], we do not require a-priori\nevent signatures for every device and can infer unknown devices and events.\nIn addition, we leverage the device's reporting pattern and interval to create\nunique reporting signatures (Section 3.4). Whenever a known device with un-\npatched vulnerability needs to be identi\fed in the target network with no eventZLeaks: Passive Inference Attacks on Zigbee based Smart Homes 7\ntriggers, we correlate the device's reporting signature with the reporting pat-\ntern and interval of every device in the target's Zigbee tra\u000ec. If the reporting\nsignatures are unavailable, we wait for an event to identify the device using com-\nmand inference. To the best of our knowledge, no prior work has demonstrated\ndevice identi\fcation, using APL commands, without collecting event signatures\nor through periodic reporting patterns. Below we explain the attack phases.",
                            "summary": "The goal of the attack is to invade the smart home's privacy by determining Zigbee devices, triggered events, and encrypted commands exchanged in the home. The attack leverages a low-cost wireless Zigbee receiver to identify and tune to the target network's communication frequency channel and sniff the Zigbee traffic. The attack does not require a-priori event signatures for every device and can infer unknown devices and events. The attack identifies the device using command inference without collecting event signatures or through periodic reporting patterns.",
                            "children": []
                        },
                        {
                            "id": "zleaks.3.2",
                            "title": "3.2 Passive Network Mapping",
                            "content": "3.2 Passive Network Mapping\nTo keep the frame length small, Zigbee uses logical address for routing, the\nsource's MAC address for authentication, and excludes the destination's MAC\naddress. Thus, to identify the type and model of the target device, it is essential\nto keep a mapping of logical address, MAC address, and logical type (ZC, ZED,\nor ZR) for each logical address (i.e., node) in the tra\u000ec. Zigbee speci\fcation [10]\nidenti\fes ZC as the node having 0x0000 logical address. We observed that for\nIEEE 802.15.4 Data Requests speci\fcally, the source node is ZED and the des-\ntination node (other than 0x0000) is ZR. In addition, we recognized ZRs as the\ndestination node of any Zigbee frame that has source routing information in the\nmetadata, and that node does not send IEEE 802.15.4 Data Requests. ZR can\nalso be identi\fed as the source of NWK commands namely Link Status, Rejoin\nResponse, and Network Report , provided the node address is not 0x0000 [9].",
                            "summary": "To identify type and model of target device, mapping of logical address, MAC address, and logical type is essential. Zigbee specification identifies ZC as node with 0x0000 logical address. ZED is the source node for IEEE 802.15.4 Data Requests and destination node (other than 0x0000) is ZR. ZRs are identified as destination node of any Zigbee frame with source routing information in metadata and as source of NWK commands like Link Status, Rejoin Response, and Network Report, provided node address is not 0x0000.",
                            "children": []
                        },
                        {
                            "id": "zleaks.3.3",
                            "title": "3.3 Device and Event Identi\fcation using Inferred APL Command",
                            "content": "3.3 Device and Event Identi\fcation using Inferred APL Command\nAlthough devices exhibit unique event patterns, the event tra\u000ec of same func-\ntional devices always includes same functionality-speci\fc APL command, e.g.,\nbulbs use color control command for color change. It happens because device\nmanufacturers use de\fned Zigbee clusters to support vendor interoperability.\nThis is validated from the o\u000ecial Zigbee compliance documents, e.g., Light-\nify [19] and Sengled [20] bulbs use same APL commands. Below we describe our\nscheme to devise and use command inference rules to identify events and devices.\nInference Algorithm: The functionality-speci\fc APL commands of interest\n(OnO\u000b, Color Control, Level Control, Lock/Unlock, and Zone Status (short for\nIAS Zone Status Change ) have \fxed payload lengths. However, there exist over-\nlappings with several generic APL commands within the encrypted tra\u000ec. This\nhappens because there are more than hundred APL commands, many of which\nare manufacturer con\fgurable and only have minimal payload and attribute size\nspeci\fed in the standard [12]. Thus, command xyzwith a minimum 10-byte\npayload and 3-byte attribute size has a payload subset of 10, 13, 16 bytes etc.\nAs shown in Figure 4, to devise inference rule for a functionality-speci\fc\nAPL command, we utilize APL frame formats [12] to \frst identify all APL\ncommands that have overlapping payload lengths and packet direction with the\ntarget command and its response command (if any), e.g., Door Lock/ unlock\nrequest andresponse . Next, a test event is triggered, and overlapping commands8 N. Shafqat et al.\nFilter \nAPL \ncommands \nsent/ \nreceived \nby \neach \ndevice\nSelect \na \nfunctionality \nspecific \nAPL \ncommand \nDevice \nand \nevent \nIdentified\nfind \noverlapping \nAPL \ncommands\nAPL \ncommands:- \nsrc, \ndst, \npayload \nlengths, \nresponse \ncommand\nLeverage \nmetadata \n+ \ndevice \nfunctionality \nto \ndevise \nrule\nUse \nZCL \nspec \n+ \ncommand \nfrequency \nto \ninfer \nevent/ \ndevice\nUse \ninference \nrules \nto \nidentify \nfunctionality \nspecific \nAPL \ncommand, \nevent \ntype \nand \ndevice \ntype \nCheck \nif \nMAC \nOUI \nis \nreal\nDevice \ntype \nand \nevent \nIdentified\nYes\nNo\nDevising \nAPL \ncommand \nInference \nrules \nAnalyzing \nencrypted \nZigbee \ncapture\nFig. 4. Strategy to identify devices and events from inferred APL commands.\nTable 1. Identifying devices and events from Inferred commands. (Resp= Response,\nD=ZED/ZR, ND=NWK discovery, *=burst repeats, **=broadcast, (x)= payload len)\nTarget Inference Rule Command Device Type Event\nZC-ZED(11) Resp = (12jj21) Lock/unlock Door lock Lock/unlock\nZC - D(11) Resp=13jj15 != 12** OnO\u000b Outlet/ bulb On/ o\u000b\nZC - D(14)ND = 1 Resp != 11\nPrec != 17**Level ControlSmart BulbLevel changed\nZC - D(15) ND = 1 Resp != 12 Color Control Color Changed\nZED-ZC(17)Preceding Packet\n(Prec) != 13Zone Status (1*) Motion Sensor Motion\nZone Status (1) Door Sensor Open/ close\nZone Status (2) Flood sensor Water leakage\nZone Status (3) Audio sensor Audio detected\nare di\u000berentiated based on the logical device type and metadata variations (e.g.,\nnetwork discovery, end device initiator, etc.). As seen in Table 1, a command\ninference rule speci\fes properties of APL commands that must be present in the\nevent burst (tra\u000ec). For instance, an APL command of payload length 11 bytes,\nsent from ZC to ZED is Lock/ unlock command if the response packet (ZED\nto ZC) is 12 or 21 bytes. Since same functional devices use same functionality-\nspeci\fc commands, the inference rules constructed for a certain device also hold\ntrue for other manufacturers' devices. We stress-checked the rules against 200\nMBs of Zigbee capture from our devices and third-party sources [17,21]. Note\nthat most APL commands (like color control ), directly re\rect the event and\ndevice type. However, for outlets and bulbs, that use same OnO\u000b command, the\ndevice type is indistinguishable until an additional event, e.g., color change is\ntriggered. For Zone Status command, we observed behavioral consistencies that\nallowed us to di\u000berentiate various types of sensors; e.g., Zone Status appears\ntwice in the event burst for \rood sensor and thrice for the audio sensor. For\nmotion and door sensor, Zone Status appears once only. However, we noticed\nthat for motion sensors, the same burst pattern repeats after few seconds.\nIdentifying Events and Devices: We \frst \flter all APL commands in the\nevent's tra\u000ec sent to or received by the target logical address (e.g., 0xabcd)ZLeaks: Passive Inference Attacks on Zigbee based Smart Homes 9\nFilter \nAPL \ncommands \nsent/ \nreceived \nby \neach \ndevice \nand \ndiscard \nduplicate \npackets\nNo\nFilter \nAPL \ncommands \nsent/ \nreceived \nby \nthe \nidle \ndevice \nand \ndiscard \nduplicate \npackets\nWait \nfor \nseveral \nperiodic \nreporting \nbursts\nWait \nfor \natleast \n2 \nperiodic \nbursts\nApply \nCommand \nInference\nDevice \nIdentified\nPattern \nand \ninterval \nof \nobserved \nbursts \ncorrelate \nwith \navailable \nsignatures?\nRecord \nsignature \nas \nrepeated \nframe \nsequence \nand \nreporting \ninterval\nDevising \nDevices' \nPeriodic \nReporting \nsignature\nAnalyzing \nencrypted \nZigbee \ncapture\nYes\nFig. 5. Strategy to identify devices using periodic reporting patterns.\nand discard any duplicate packet. We observed that the functionality-speci\fc\ncommand is generally the \frst APL command of the event burst; hence we also\ndiscard bursts that do not have any frame with target payload lengths (11-\n17 bytes) in the initial half of the burst. If a command with target payload\nlength exists, we use Table 1 to identify the APL command, event, and device\ntype. Finally, we combine the manufacturer's identity extracted from the device's\nMAC OUI (e.g., PhilipL) to identify the device. Note that the exact device's\nidenti\fcation depends on the MAC OUI showing real manufacturer, rather than\nsystem-on-chip (SOC) manufacturer, e.g., SiliconL. In essence, we can passively\nidentify unknown events and devices from the target functional domains (bulbs,\noutlets, door locks, and sensors) without the Network key or event signatures.",
                            "summary": "Devices exhibit unique event patterns, but the event traffic of same functional devices always includes the same functionality-specific APL command. This is validated from the official Zigbee compliance documents, and we describe a scheme to devise and use command inference rules to identify events and devices. The inference algorithm utilizes APL frame formats to devise inference rules for functionality-specific APL commands. We stress-checked the rules against 200 MBs of Zigbee capture from our devices and third-party sources. We can passively identify unknown events and devices from the target functional domains without the Network key or event signatures.",
                            "children": []
                        },
                        {
                            "id": "zleaks.3.4",
                            "title": "3.4 Device Identi\fcation using Periodic Reporting Patterns",
                            "content": "3.4 Device Identi\fcation using Periodic Reporting Patterns\nZigbee devices periodically report their status (battery level, \frmware upgrades,\netc.) to ZC. Since every functional device has varied power consumption, the\nmanufacturers manipulate periodic reporting frequency, and speci\fc frame at-\ntributes to comply with the Zigbee certi\fcation requirement of minimum 2 years\nbattery life [13]. The discrepancies in reporting patterns and intervals allow us\nto devise unique device \fngerprints and identify devices even when no event\noccurs (e.g., during o\u000ece hours). Unlike event bursts, reporting bursts have no\nfunctionality-speci\fc APL command and do not directly reveal device's identity.\nDevising Periodic Reporting Signatures: As shown in Figure 5, to devise\na device's periodic reporting signature, we put the device in the idle state and\n\flter all APL commands exchanged between the device and ZC. After discarding\nduplicate packets, we analyze the tra\u000ec to determine at least three bursts with\nsame reporting pattern and interval. Thus, the signature sign iis a sequence of\nAPL frames f ide\fned using logical device type of source (src) and destination\n(dst), payload length (pl), and reporting interval (RI) and is represented as:\nsign i=ff1; f2; f3; :::gwhere fi=fsrc i; dst i; pl i; RI ig (1)\nIdentifying Devices: We \frst \flter APL commands from the tra\u000ec and dis-\ncard duplicate packets or bursts with any functionality-speci\fc command. Next,10 N. Shafqat et al.\nwe look for two similar bursts and correlate the observed pattern and interval\nwith the available signature set to identify the device. Rarely, but if two signa-\nture sets collide, we use additional attributes like MAC OUI to make a decision.\nIf no reporting signatures are available for a device, we wait for an event burst\nto identify the device using command inference approach (Section 3.3).",
                            "summary": "Zigbee devices use varied power consumption to comply with the Zigbee certification requirement of minimum 2 years battery life. This allows for unique device fingerprints to be devised and devices to be identified even during office hours. Device periodic reporting signatures are sequences of APL frames defined using logical device type of source and destination, payload length, and reporting interval. Devices are identified by correlating observed patterns and intervals with available signature sets. Additional attributes like MAC OUI are used if signature sets collide or no reporting signatures are available.",
                            "children": []
                        }
                    ]
                },
                {
                    "id": "zleaks.4",
                    "title": "4 Experimental Setup and Results",
                    "content": "4 Experimental Setup and Results",
                    "summary": "ZLeaks is a Python-based command-line tool that automates inference attacks on Zigbee networks. It identifies events and devices using proposed APL inference rules or available reporting signatures. ZLeaks was evaluated using inferred APL commands, event and device type extracted from APL command, and correlated periodic reporting patterns. The controlled evaluation inside the RF shield showed that distinct events like color change and motion detection were easy to infer than binary events. ZLeaks identified all devices with an average score of 4.3 out of 5. The study evaluated the reproducibility and uniqueness of periodic signatures of various devices using reporting patterns. The analysis of traffic after specific time intervals revealed that the device and manufacturer identity is leaked even in the device's idle state, which is concerning.",
                    "children": [
                        {
                            "id": "zleaks.4.1",
                            "title": "4.1 Automating Passive Inference Attacks with ZLeaks Tool",
                            "content": "4.1 Automating Passive Inference Attacks with ZLeaks Tool\nTo automate the inference attacks depicted in Figure 3, we developed a command-\nline tool in Python, named ZLeaks. ZLeaks takes Zigbee PCAP capture as input\nand determines the event occurrences and devices in the network. While in the\nvicinity of the target network, the attacker can run ZLeaks on his laptop or\nembedded board like Raspberry Pi with a single command. ZLeaks extracts all\nAPL commands from the captured tra\u000ec and uses Pyshark library [22] to parse\nrequired frame attributes (e.g., payload length, logical types of nodes, etc.) in a\ntemporary CSV \fle for analysis. ZLeaks then attempts to identify events and de-\nvices using either proposed APL inference rules (Section 3.3) or available report-\ning signatures (Section 3.4). Note that the attacker can automatically extract\nreporting signatures of an idle Zigbee device using ZLeaks Signature Extractor.",
                            "summary": "ZLeaks is a command-line tool developed in Python that automates inference attacks on Zigbee networks. It takes Zigbee PCAP capture as input and extracts all APL commands from the captured traffic to determine event occurrences and devices in the network. It identifies events and devices using either proposed APL inference rules or available reporting signatures. The attacker can run ZLeaks on their laptop or embedded board with a single command while in the vicinity of the target network. ZLeaks Signature Extractor can also be used to automatically extract reporting signatures of an idle Zigbee device.",
                            "children": []
                        },
                        {
                            "id": "zleaks.4.2",
                            "title": "4.2 Experimental Setup",
                            "content": "4.2 Experimental Setup\nOur device set comprised of 27 commercial o\u000b-the-shelf Zigbee devices (ranging\nfrom bulbs, locks, outlets, to various sensors) that were selected based on Ama-\nzon's popularity and manufacturer diversity. Amongst 27 devices, 19 devices\nwere unique, while a few non-unique devices were purchased from a di\u000berent\nsource and tested to ensure that the evaluation results for a particular device\nand model remain consistent. Furthermore, while we used 11 unique devices to\nformulate inference strategy, we set aside 8 unique devices, at least one from\neach functional domain as the unknown devices for the sole purpose of evalu-\nation. The known and unknown devices are listed for reference in Table 3 and\nTable 4 respectively. The tests were conducted with 2 universal (manufacturer-\nindependent) hubs; SmartThings and Amazon Echo Plus and 3 vendor-speci\fc\nhubs; Philips Hue Bridge 2.1, Sengled Z02-hub, and Lightify Gateway. This is\nby far the most extensive Zigbee device set used to evaluate Zigbee protocol.\nWe evaluated ZLeaks identi\fcation techniques in following three settings;\nRF shield: It was used to i) study devices' response to event triggers while\ndevising command inference rules, ii) collect the device's reporting pattern, and\niii) perform a controlled evaluation of ZLeaks by simultaneously pairing multiple\ndevices with each hub. As depicted in Figure 6; the RF shield was connected to\nthe gateway to provide continued Internet access to ZC placed inside the shield.\nTo sni\u000b the Zigbee communication, a standard omnidirectional antenna (inside\nthe shield) was connected via an SMA cable to a low-cost TI CC2531 wireless\nZigbee sni\u000ber [18] plugged into the laptop (outside the shield).ZLeaks: Passive Inference Attacks on Zigbee based Smart Homes 11\nRF \nShield\nLaptop\nMobile\nRouter\nHub\nSniffer\nBulb\nAntenna\nFig. 6. Experimental Setup for analyzing Zigbee Devices: SMA cable connects sni\u000ber's\nantenna (inside RF shield) with TI CC2531 sni\u000ber connected to the laptop outside.\nIoT \\Living Lab\": It is a realistic noisy IoT lab named \\Mon(IoT)r Lab\"\nat Northeastern University [15], which has more than 100 smart devices already\nconnected over several wireless networks, along with various non-IoT networks.\nPublic Captures: We used Zigbee captures from; i) Wireshark forum [16],\nand ii) Prior captures [9] available on Crawdad [17] to show that ZLeaks is in-\ndependent of evaluation testbed, device set, and works for unknown devices. We\nveri\fed the results using the Network keys available with the capture \fles. Both\nthe captures contained only event bursts and did not include enough reporting\npatterns to evaluate the periodic reporting approach.",
                            "summary": "The experimental setup for evaluating Zigbee protocol consisted of 27 commercial off-the-shelf Zigbee devices, including bulbs, locks, outlets, and sensors, selected based on Amazon's popularity and manufacturer diversity. The tests were conducted with 5 different hubs, and ZLeaks identification techniques were evaluated in three settings: RF shield, IoT Living Lab, and Public Captures. The RF shield was used to study devices' response to event triggers, collect the device's reporting pattern, and perform a controlled evaluation of ZLeaks. The IoT Living Lab is a realistic noisy IoT lab with over 100 smart devices already connected over several wireless networks. Public captures were used to show that ZLeaks is independent of evaluation testbed, device set, and works for unknown devices.",
                            "children": []
                        },
                        {
                            "id": "zleaks.4.3",
                            "title": "4.3 Evaluation Metrics",
                            "content": "4.3 Evaluation Metrics\nWe evaluated ZLeaks using three parameters; 1) Inferred APL commands, 2)\nEvent and device type extracted from APL command, and 3) Correlated periodic\nreporting patterns. We used traditional accuracy metrics to evaluate parameters\n1 and 3. As a particular inferred APL command always yields same results for\nevent and device, we evaluated parameter 2 using proposed Device Score scheme.\nTraditional Metrics: We use True Positive Rate (TPR) and False Negative\nRate (FNR) to specify the rate of correct and missed (or out-of-order) obser-\nvations, respectively. As evaluation results indicate, there are no False Positives\n(FP) or True Negative (TN) outcomes, hence, we calculate accuracy , i.e., the\nratio of correctly inferred observations to the total number of observations, as:\nTPR (recall) =TP\nTP + FN'(2)\nFNR =FN\nTP + FN'(3)\nAccuracy =TP+TN\nTP + TN + FP + FN'(4)\nScore ( short for Device Score ):It determines the amount of device\nand event information extracted from the inferred APL command and device\nOUI. We calculate Score as a sum of device type (DT), event type (ET) and\nmanufacturer's identity (M), with weights of each attribute de\fned in Table 2.\nScore = M+DT+ET (5)12 N. Shafqat et al.\nTable 2. Score Table for Evaluating Command Inference Approach\nAttributes Score Example\nManufacturer (M)0 = SOC OUI SiliconL, Ember, TexasIns, NordiacSE ..\n1 = Real MAC OUI PhilipsL, OSRAM, SmartThi, Zhejiang ..\nDevice Type (DT)0 = Unidenti\fed -\n1 = Uncertain door lock or bulb (di\u000berent commands)\n1.5 = Indistinct either outlet or bulb? (same command)\n2 = Identi\fed Outlet, door lock, motion sensor, bulb ..\nEvent Type (ET)0 = Unidenti\fed -\n1 = Uncertain lock/unlock or on/o\u000b (di\u000berent commands)\n1.5 = Indistinct either door lock or unlock? (same commands)\n2 = Identi\fed motion detected, color change, etc ..\nTo understand Score, consider switching on a bulb that triggers a functionality-\nspeci\fc APL command from ZC to ZED of payload size 11 bytes. The highest\nScore is 5 when all attributes are correctly inferred, and lowest is 0 when nothing\nis inferred. As per Table 1, the command is either Lock/ unlock or On/o\u000b . From\nTable 2, DT and ET are 1 if these two commands are indistinguishable. For\nOn/o\u000b command, DT (bulbs or outlet) and ET (on or o\u000b) are 1.5, whereas for\nLock/ unlock command, DT is 2 (lock) while ET is 1.5 (lock or unlock).",
                            "summary": "ZLeaks was evaluated using inferred APL commands, event and device type extracted from APL command, and correlated periodic reporting patterns. Traditional accuracy metrics were used to evaluate inferred commands and periodic reporting patterns, while a proposed Device Score scheme was used to evaluate event and device type extraction. The Device Score is determined by summing the weights of device type, event type, and manufacturer's identity. The highest possible score is 5, indicating correct inference of all attributes, while the lowest possible score is 0, indicating no inference. The device and event type are identified using a combination of device type and event type weights.",
                            "children": []
                        },
                        {
                            "id": "zleaks.4.4",
                            "title": "4.4 Device and Event Identi\fcation using Inferred APL Command",
                            "content": "4.4 Device and Event Identi\fcation using Inferred APL Command\nControlled Evaluation in RF Shield: We simultaneously paired all compat-\nible devices with one hub at a time inside the RF shield and generated events\nrandomly. From the sni\u000bed tra\u000ec, ZLeaks inferred functionality-speci\fc APL\ncommands and MAC OUI for each device to determine triggered events and\ndevices. Since the inferred APL command and MAC OUI remain same for a\nparticular device-event pair (e.g., color change for Sengled bulb), the Score re-\nmains same for every event prompt irrespective of the hub. Therefore, Table 3\nreports \fndings of each device once. We see that distinct events like color change,\nmotion detected, etc., are easy to infer than binary events (e.g., on/o\u000b). Philips\nbulb is an exception here as it uses distinct commands to represent on and o\u000b\nevents. Furthermore, we identi\fed various sensors from a single Zone Status com-\nmand based on behavioral consistencies (refer to rules in Table 1). To conclude,\nthe Score is dependent on the correct identi\fcation of the APL command and\nthe MAC OUI showing the real manufacturer e.g., PhilipsL (Philips), Smart-\nThi/ Samjin (SmartThings), Ledvance (OSRAM), Zhejiang (Sengled), Jennic\n(Aqara), etc. ZLeaks identi\fed all devices with an average Score of 4.3 out of 5\n(i.e., 86.3% information was successfully extracted).\nRealistic Evaluation in an IoT \\Living Lab\": Next, we shifted all these\ndevices, hubs, and 8 unknown (unseen) devices to the IoT lab. Again, we si-\nmultaneously paired all devices to one hub at a time, generated random events,ZLeaks: Passive Inference Attacks on Zigbee based Smart Homes 13\nTable 3. Controlled Evaluation: Identifying Devices and Events using Inferred APL\nCommands. Here, SMT= SmartThings, M= Manufacturer, DT= Device Type, ET=\nEvent type, and *= burst repeats after few seconds\nDevice (Model) Event OUI Command (#) MDTETScore\nPhilips Hue Color Bulb\n(LCA-003)O\u000b PhilipsL O\u000b with e\u000bect 122 5\nOn PhilipsL On/o\u000b: On 122 5\nColor change PhilipsL Color Control 122 5\nDim PhilipsL Level Control 122 5\nSengled Color Bulb\n(E11-N1EA)Color change Zhejiang Color Control 122 5\nDim Zhejiang Level Control 122 5\nOn/o\u000b Zhejiang On/O\u000b 11.51.5 4\nSengled White Bulb G14 On/O\u000b Zhejiang On/O\u000b 11.51.5 4\nCentralite Outlet (Mini) On/O\u000b siliconL On/O\u000b 01.51.5 3\nSono\u000b Outlet (S31 Lite) On/O\u000b texasIns On/O\u000b 01.51.5 3\nSMT Outlet (US-2) On/O\u000b Smartthi On/O\u000b 11.51.5 4\nSMT Motion sensor (IM) Motion Smartthi Zone Status (1*) 122 5\nSMT Multisensor (250) Open/close samjin Zone Status (1) 121.5 4.5\nEcolink Water Sensor water leak ember Zone Status (2) 022 4\nEcolink Sound Sensor Sound ember Zone Status (3) 022 4\nYale Door lock (YRD226) Lock/unlock ember Lock/Unlock 021.5 3.5\nTable 4. Realistic Evaluation: Identifying Unknown Devices and Events using Inferred\nCommands. (M= Manufacturer, DT= Device Type, ET= Event type, *= repeats)\nDevice (Model) Event OUI Command (#) MDTETScore\nPhilips White BulbO\u000bPhilipsLO\u000b with e\u000bect 122 5\nOn On/o\u000b: On 122 5\nOSRAM Color Bulb\n(Sylvania Smart+)On/o\u000b ledvance On/O\u000b 121 4\nColor change ledvance Color Control 122 5\nDim ledvance Level Control 122 5\nSmartThings (SMT) Bulb On/o\u000b SiliconL On/O\u000b 01.51.5 3\nAqara Outlet (US) On/o\u000b jennic On/O\u000b 11.51.5 4\nEwelink Outlet (SA-003) On/o\u000b TexasIns On/O\u000b 01.51.5 3\nSMT Motion Sensor IRM Motion samjin Zone Status (1*) 122 5\nVisonic Door sensor MCT Open/close ember Zone Status (1) 021.5 3.5\nSchlage Lock (Connect) Lock/unlock siliconL Lock/Unlock 021.5 3.5\nand analyzed the tra\u000ec with ZLeaks. Despite the noisy environment, the known\ndevices exhibited the same Score as reported in Table 3. The experimental re-\nsults for unknown devices are presented in Table 4. Unknown devices with real\nMAC OUI and distinct event types, e.g., color change for Sengled bulb, were ac-\ncurately identi\fed by ZLeaks. Overall, ZLeaks identi\fed unknown devices with\nan average Score of 4.2 out of 5 (i.e., identi\fed 83.6% devices and events). We\nconclude that despite devices exhibiting unique event signatures across di\u000berent\nhubs, the functionality-speci\fc APL command remains same and can be used to\ne\u000bectively identify any unknown device with a single event trigger.14 N. Shafqat et al.\nTable 5. Public Evaluation: Identifying Unknown Devices and Events using Inferred\nCommands. (M= Manufacturer, DT= Device Type, ET= Event type, *= repeats)\nSource Unknown Device MAC OUI Command (#) MDTETScore\nWireshark\nZCL log [16]Motion Sensor 1 private Zone Status (1*) 022 4\nMotion Sensor 2 none Zone Status (1*) 022 4\nZigator [17]\nSth2-duosSmartThings Outlet\n(IM6001)samjin On/o\u000b 11.51.5 4\nTable 6. Evaluating APL Command Inference rules on Public Zigbee Capture [17].\nNote: * implies that the command is identi\fed, but not the state.\nAPL Commands Total Packets Inferred Packets Accuracy (%)\nZone Status Change 2916 2712 93.0\nZCL OnjjZCL O\u000b 2423 2175* 89.8\nDoor lockjjUnlock Request 676 596* 88.1\nDoor lockjjUnlock Response 403 370 * 91.8\nColor Control, Level Control 0 0 0\nOpen World Evaluation on Public Captures: We evaluated ZLeaks over\npublic Zigbee captures and reported results in Table 5. In capture 1 [16], we found\n2 unknown devices that were recognized as motion sensors due to the presence of\nrepetitive Zone Change commands. Capture 2 [17] had 1 unknown device which\nused On/O\u000b for events. Note that we removed device commissioning tra\u000ec\n(including Network key) from both \fles to comply with our threat model.\nAs device identi\fcation is dependent on the correct inference of functionality-\nspeci\fc APL commands, we also evaluated ZLeaks inference rules on capture\n2 [17]. The results in Table 6 indicate that ZLeaks inferred functionality-speci\fc\nAPL commands with 91.2% accuracy. We used our command inference strategy\non generic APL commands and were able to infer Device Announcement, Bind\nRequest and Response (RR), Link Quality RR, NWK Address RR, Parent An-\nnouncement RR, etc., with 100% accuracy. Most of all, the 6 NWK commands\nthat Zigator [9] could not identify, were inferred with 85.7% accuracy.",
                            "summary": "ZLeaks developed a passive inference attack on Zigbee based Smart Homes to identify devices and events using inferred APL commands and MAC OUI. The controlled evaluation inside the RF shield showed that distinct events like color change and motion detection were easy to infer than binary events. ZLeaks identified all devices with an average score of 4.3 out of 5. The realistic evaluation in an IoT lab showed that despite the noisy environment, the known devices exhibited the same score as reported in the controlled evaluation. The experimental results for unknown devices showed that ZLeaks identified unknown devices with an average score of 4.2 out of 5. The public evaluation on Zigbee captures showed that ZLeaks inferred functionality-specific APL commands with 91.2% accuracy.",
                            "children": []
                        },
                        {
                            "id": "zleaks.4.5",
                            "title": "4.5 Device Identi\fcation using Periodic Reporting Patterns",
                            "content": "4.5 Device Identi\fcation using Periodic Reporting Patterns\nControlled Evaluation in RF Shield: We simultaneously paired all known\ndevices with one hub at a time in an RF shield and left them in the idle state\nfor at least 3 hrs. This way, devices reporting the attributes every 5 or 10 mins\nyielded 36 and 18 reporting patterns, respectively, which are su\u000ecient to evaluate\ntwo main features; reproducibility and uniqueness of periodic signatures. Table\n7 summarizes the results of this experiment, with reporting intervals in second,\nminute, and hour represented using letters s, m, and h. Note that several devices\nexhibited more than one reporting pattern, e.g., for battery, temperature, etc.,\nwhile few devices showed a di\u000berent number of reporting patterns across di\u000berent\nhubs, e.g., SMT and Sono\u000b outlet. This essentially helped identify both theZLeaks: Passive Inference Attacks on Zigbee based Smart Homes 15\nTable 7. Controlled Evaluation of Periodic Reporting scheme. Here, SMT= Smart-\nThings, RI= Reporting interval, TPR= True positive rate, FNR = False negative rate\nDeviceSMT v2 Hub Amazon Echo+ Philips/ Sengled\nRI TPR FNR RI TPR FNR RI TPR FNR\nCentralite Outlet 5, 10m 1 0 5, 9m 0.982 0.018 N/A\nSono\u000b Outlet 5m 1 05, 10m 1 0 N/A\nSMT Outlet 5, 10m 1 0 10m 1 0 N/A\nSengled White Bulb 5m 1 0 10m 1 05,20,25m 1 0\nSengled Color Bulb 10m, 1h 1 010m, 1h 1 05,20,25m 1 0\nPhilips Hue Color Bulb 1s, 2m 1 01s, 2m 1 0 1s, 2m 1 0\nSMT Motion sensor (IM) 5m 1 0 5m 1 0 N/A\nSMT Multisensor 5m, 1h 0.975 0.025 5m, 1h 1 0 N/A\nEcolink water sensor 30, 30m 1 0 N/A N/A\nEcolink sound sensor 27, 30m 1 0 N/A N/A\nYale Door Lock 1h 1 0 10m 1 0 N/A\nTable 8. Realistic Evaluation of Periodic Reporting scheme. ( = successful device\nidenti\fcation, = success using additional info, and = resembled other device)\nDeviceSMT v2 Hub Amazon Echo+ Vendor Hub\n15m 30m 1h3h15m 30m 1h3h15m 30m 1h3h\nCentralite Outlet\nSono\u000b Outlet\nSmartThings (SMT) Outlet\nSengled (White) Bulb\nSengled (Color) Bulb\nPhilips Hue (Color) Bulb\nSMT Motion sensor (IM)\nSMT Multi sensor\nEcolink water sensor Not compatible\nEcolink sound sensor Not compatible\nYale Door Lock\ndevice and the smart hub from the encrypted tra\u000ec. It is evident from a high\naverage TPR of 0.998 and low FNR of 0.002 that the periodic signatures were\nidenti\fable and consistent over time, except once when the Centralite outlet and\nSMT Multisensor showed two out-of-order packets and were not identi\fed.\nRealistic Evaluation in IoT \\Living Lab\": Next, we shifted all the hubs,\nand known and unknown devices to the Mon(IoT)r lab. We paired all compatible\ndevices to one target hub at a time and used the remaining devices as background\nZigbee noise sources. The devices were left in the idle state for 3 hrs, and ZLeaks\nanalyzed tra\u000ec after speci\fc time intervals (15 mins, 30 mins, 1 hr, and 3 hrs).\nIn Table 8, devices that were distinctively identi\fed after the speci\fed time are\nmarked with a full circle, e.g., all outlets had reporting intervals of 5 and/or 10\nmins; and were successfully identi\fed within 15 mins. Half-circle indicates iden-16 N. Shafqat et al.\ntical reporting pattern and interval for two devices, e.g., both Yale and Schlage\nlock (unknown device) reported the same pattern after 1 hr. In such a case, we\nused additional parameters (e.g., MAC OUI or logical device type) to identify\nthe device. Finally, an empty circle depicts a complete resemblance between two\ndevices, e.g., SMT motion sensor IRM (an unknown device) and SMT multisen-\nsor showed same patterns until the latter device reported its second pattern after\n1 hr. In essence, it is quite concerning that the device and manufacturer identity\nis leaked even in the device's idle state. Note that we could not evaluate this\napproach on public captures due to the absence of periodic reporting patterns.",
                            "summary": "The study evaluated the reproducibility and uniqueness of periodic signatures of various devices using reporting patterns. The results indicated that the periodic signatures were identifiable and consistent over time, except for a few outliers. The study was conducted in an RF shield and then in a living lab, where devices were paired with one target hub at a time and left idle for 3 hours. The analysis of traffic after specific time intervals revealed that the device and manufacturer identity is leaked even in the device's idle state, which is concerning.",
                            "children": []
                        }
                    ]
                },
                {
                    "id": "zleaks.5",
                    "title": "5 Discussion and Related Work",
                    "content": "5 Discussion and Related Work",
                    "summary": "Leaked data from smart home devices can be used by attackers to spread malware, create IoT botnets, or carry out denial of service attacks. It can also be used by burglars to determine when a house is vulnerable to intrusion. Manufacturers can use the information for interest-based advertising or business decisions. Countermeasures require significant design and implementation changes in the Zigbee protocol. ZLeaks is a study that infers event and device information without collecting event fingerprints for every device, and it identifies the device type and device with 99.8% accuracy.",
                    "children": [
                        {
                            "id": "zleaks.5.1",
                            "title": "5.1 Security Implications of Leaked Data",
                            "content": "5.1 Security Implications of Leaked Data\nThe know-how of devices in the smart home and their states (e.g., door unlocked\nor bulb o\u000b) is crucial to the smart home's security. A burglar can use this\ninformation to get insight into users' a\u000fuence and determine when the house is\nvulnerable to intrusion. In addition, an attacker can use Common Vulnerabilities\nand Exposures (CVE) database [23] to \fnd and exploit unpatched vulnerabilities\nin the identi\fed devices. The vulnerable devices can be weaponized to spread\nmalware to the network [24], create IoT botnets [25] or carry out denial of service\nattacks. The attacker may also use side-channel attack to hijack the vulnerable\nhub [26]. From a business perspective, the leaked information can help Zigbee\nmanufacturers gain deep insights into users' usage and activity patterns. This\ninformation can be sold to advertisers for interest-based advertisements, online\ntracking, or used in business decisions on future products. In short, our study\nprovides deep insights into potential information leakages right at the source.",
                            "summary": "Leaked data from smart home devices can pose serious security risks, as attackers can exploit vulnerabilities in the devices to spread malware, create IoT botnets, or carry out denial of service attacks. Burglars can also use the information to determine when a house is vulnerable to intrusion. Additionally, manufacturers can use the leaked information for interest-based advertising or business decisions. Our study highlights the importance of securing smart home devices to prevent such leakages.",
                            "children": []
                        },
                        {
                            "id": "zleaks.5.2",
                            "title": "5.2 Potential Countermeasures",
                            "content": "5.2 Potential Countermeasures\nZLeaks demonstrates the signi\fcance of unencrypted metadata (MAC OUI,\nframe, and payload lengths) in identifying functionality speci\fc commands, events,\nand devices in the Zigbee network. Although exponential padding [27] e\u000bectively\ndisguises payload lengths, it adds transmission overhead and increases power\nconsumption for low-power Zigbee devices. We suggest padding random bytes\nin each payload (e.g., 0,1,2 or 3 bytes) and using the reserved \feld in the Zigbee\nsecurity header to denote the number of padded bytes. This way, even same APL\ncommands will have four di\u000berent payload sizes, which will add enough entropy\nto make the Zigbee commands indistinguishable. Secondly, Zigbee Alliance can\nmandate the use of chipset manufacturer's identi\fer as MAC OUI to hide the\nreal manufacturer's identity. This alone reduces the average Score calculated for\nunknown devices using the APL inference approach from 4.0 (80%) to 3.1 (62%).\nThe volumetric analysis also provides signi\fcant hints regarding the occur-\nrence of an event or periodic reporting. To make events indistinguishable, prior\nresearch [28,29] leverage mains-powered ZR or ZC to inject decoy packets in theZLeaks: Passive Inference Attacks on Zigbee based Smart Homes 17\nTable 9. Privacy Implications of Leaked Information and Suggested Countermeasures.\nInfo Privacy Implication Countermeasure to disguise info\nDevice- Hijack vulnerable devices/ network\n- Insight regarding user's a\u000fuence\n- Online advertisingUse SOC MAC OUI to hide vendor\nUse random payload padding to\ncomplicate command inference\nEvent- Reveals user's presence/ absence\ndaily routineAttribute Pipelining ORsimilar request\n-response patterns to hide events\ntra\u000ec at pseudo-random intervals. However, decoy injector requires continuous\ntraining to avoid detection by the attacker. An e\u000ecient way to disguise events\nis to have similar event responses and reporting patterns for all devices. Alter-\nnatively, all attributes can be pipelined in a single packet instead of a series of\npackets. The suggested countermeasures, as summarized in Table 9 require sig-\nni\fcant design and implementation changes in the Zigbee protocol, as it is hard\nto prevent proposed inference attacks with a simple workaround like using a se-\ncure network or link key. We believe this is why the Zigbee Alliance is involved in\nnew smart home technology, Matter [30], which has security as the fundamental\ndesign tenet and does not use Zigbee as the underlying IoT protocol.",
                            "summary": "Random payload padding and using the reserved field in the Zigbee security header to denote the number of padded bytes can make Zigbee commands indistinguishable. Mandating the use of chipset manufacturer's identifier as MAC OUI can hide the real manufacturer's identity. Using attribute pipelining or similar request-response patterns to hide events traffic at pseudo-random intervals can disguise events. These countermeasures require significant design and implementation changes in the Zigbee protocol, as it is hard to prevent proposed inference attacks with a simple workaround like using a secure network or link key.",
                            "children": []
                        },
                        {
                            "id": "zleaks.5.3",
                            "title": "5.3 Related Work",
                            "content": "5.3 Related Work\nPrivacy Analysis of Smart Home's IP Tra\u000ec: Several research studies have\nanalysed the encrypted IP network tra\u000ec of smart homes to predict devices'\nevents [4,5], user's habits [6], device types [1,2,3,31,32], and network anoma-\nlies [33,34]. Few studies [8,35] also analyzed the IP tra\u000ec between the smart\napp and cloud to detect misbehaving smart apps. Although these studies yield\npromising results, there are a few limitations; 1) attacker requires physical access\nto the network or mobile app, and 2) these approaches exploit tra\u000ec metadata\n(i.e., payload length, DNS responses, etc.); hence their e\u000bectiveness is question-\nable under realistic network conditions like Virtual Private Networks and Net-\nwork Address and Port Translation enabled. Although recent studies have lever-\naged packet-level signatures and temporal packet relations to identify events [5]\nand devices [36] despite tra\u000ec shaping in place, these machine learning (ML)\napproaches require re-training after \frmware upgrades to extract new signatures.\nPrivacy analysis of Zigbee (non-IP) Tra\u000ec: Unlike IP tra\u000ec patterns,\nZigbee tra\u000ec patterns are challenging to obfuscate using conventional tra\u000ec\nshaping, as it directly impacts power consumption and battery life. Still, very\nfew studies [7,8,37,38,39] have analyzed Zigbee tra\u000ec with the intent to study\ninformation leakages right at the source. Zigator [9] exploited unencrypted at-\ntributes of Zigbee frames, notably packet length, directions, radius, and logical\ndevice type, to infer 6 out of 12 encrypted NWK commands. However, this infer-\nence approach does not apply to APL commands. Peekaboo [7] exploited tra\u000ec\nrate variations, and IoTSpy [39] leveraged packet sequence features to \fngerprint\nknown IoT events of merely 3 and 5 Zigbee devices, respectively. In addition,\nHomonit [8] and IoTGaze [38] analyzed Zigbee event patterns to detect malicious18 N. Shafqat et al.\nTable 10. ZLeaks vs. existing Zigbee based schemes for identifying Event Type (ET),\nDevice Type (DT), Device Identity (DI) and applicability on Unknown devices (UD).\nResearch\nWorkUniqueTechnique (Feature)Identi\fed\nHubs Devices ETDTDIUD\nPeekaboo [7] 1 3 ML (tra\u000ec pro\fling)\nZ-IoT [37] 1 8 ML (inter-arrival-times)\nIoTGaze [38] 1 5 ML (event pattern)\nIoTSpy [39] 1 5 NLP (frame len (\r), direction)\nHomonit [8] 1 7 Levenshtein Distance (\r, direction)\nZLeaks 5 19Command Inference (metadata)\nCorrelation (periodic reporting)\nsmart home apps. However, all these studies are con\fned to the identi\fcation of\nknown events using a-priori event \fngerprints. In contrast, ZLeaks infers event as\nwell as device information without collecting event \fngerprints for every device.\nAnother study, Z-IoT [37] employed ML to identify device type by exploiting\ninter-arrival-time of NWK frames and IEEE 802.15.4 Data requests of the idle\ndevice. In contrast, ZLeaks exploits the device's periodic reporting interval and\npattern (based on APL commands) to identify the device type and the device\nwith 99.8% accuracy. As evident from Table 10, our study was conducted on the\nlargest device set spanning 5 hubs and 19 unique Zigbee devices.\nSecurity of Zigbee Protocol: Several attacks have been demonstrated\nagainst Zigbee protocol so far, such as selective jamming [9], worm chaining [24],\ncommand injection [40], replaying [41], etc., with an aim to recover the Network\nkey or make the target devices malfunction. Unlike ZLeaks, these attacks either\nrely on leaked global link key, install (QR) codes or require attacker's presence\nduring the device's setup to identify key material.",
                            "summary": "Several studies have analyzed the IP and Zigbee traffic of smart homes to predict events, user habits, device types, and network anomalies. However, these approaches have limitations such as requiring physical access to the network or exploiting traffic metadata. ZLeaks is a study that infers event and device information without collecting event fingerprints for every device. It exploits the device's periodic reporting interval and pattern to identify the device type and device with 99.8% accuracy. In contrast to other attacks on Zigbee protocol, ZLeaks does not rely on leaked global link key or require attacker's presence during the device's setup to identify key material.",
                            "children": []
                        }
                    ]
                },
                {
                    "id": "zleaks.6",
                    "title": "6 Conclusion",
                    "content": "6 Conclusion\nThis work highlighted that the power optimization-oriented design of Zigbee pro-\ntocol has destroyed the legal concept of privacy in smart homes. We presented\nZLeaks [14], a privacy analysis tool that employs two inference techniques to\ndemonstrate how easily a passive eavesdropper can determine in-home devices\nand events from the encrypted tra\u000ec, using a low-cost wireless Zigbee sni\u000ber (TI\nCC2531). The evaluation conducted on an exhaustive set of 19 unique Zigbee de-\nvices and 5 smart hubs indicates that the ZLeaks command inference technique\nidenti\fed unknown events and devices with 83.6% accuracy, without using event\nsignatures. In addition, ZLeaks periodic reporting technique identi\fed known\ndevices in the absence of any user activity with 99.8% accuracy. Finally, we eval-\nuated our command inference rules on a third-party capture \fle and identi\fed\nfunctionality-speci\fc APL commands with 91.2% accuracy, irrespective of the\nsecret keys. We conclude that the proposed inference attacks are impossible to\nprevent without making signi\fcant design changes in the Zigbee protocol.ZLeaks: Passive Inference Attacks on Zigbee based Smart Homes 19",
                    "summary": "This work presents ZLeaks, a privacy analysis tool that exposes the vulnerability of Zigbee protocol in smart homes. Using two inference techniques, ZLeaks demonstrates how a passive eavesdropper can determine in-home devices and events from encrypted traffic using a low-cost wireless Zigbee sniffer. The evaluation conducted on 19 unique Zigbee devices and 5 smart hubs indicates that the ZLeaks command inference technique identified unknown events and devices with 83.6% accuracy, without using event signatures. The ZLeaks periodic reporting technique identified known devices in the absence of any user activity with 99.8% accuracy. The proposed inference attacks are impossible to prevent without making significant design changes in the Zigbee protocol.",
                    "children": []
                },
                {
                    "id": "zleaks.references&appendix",
                    "title": "References",
                    "content": "1. Marchal, S., Miettinen, M., Nguyen, T., Sadeghi, A.R., Asokan, N.: AuDI: Towards\nautonomous IoT device-type identi\fcation using periodic communications. IEEE\nJournal on Selected Areas in Communications. (2019)\n2. Meidan, Y., Bohadana, M., Shabtai, A., Guarnizo, J.D., Ochoa, M., Tippenhauer,\nN.O., Elovici, Y.: Pro\fliot: A machine learning approach for iot device identi\fca-\ntion based on network tra\u000ec analysis. In: Proceedings of the symposium on applied\ncomputing. pp. 506{509. ACM, Morocco (2017)\n3. Miettinen, M., Marchal, S., Hafeez, I., Asokan, N., Sadeghi, A.R., Tarkoma, S.: Iot\nsentinel: Automated device-type identi\fcation for security enforcement in iot. In:\n37th International Conference on Distributed Computing Systems. pp. 2177{2184.\nIEEE, USA (2017)\n4. Pierre Marie Junges, J.F., Festor, O.: Passive inference of useractions through iot\ngateway encrypted tra\u000ec analysis. IEEE Symposium on Integrated Network and\nService Management. IEEE, USA (2019)\n5. Trimananda, R., Varmarken, J., Markopoulou, A., Demsky, B.: Packet-level sig-\nnatures for smart home devices. In: Network and Distributed System Security\nSymposium, 10(13), 54. NDSS, USA (2020)\n6. Copos, B., Levitt, K., Bishop, M., Rowe, J.: Is anybody home? inferring activ-\nity from smart home network tra\u000ec. In: IEEE Security and Privacy Workshops\n(SPW). pp. 245{251. IEEE, USA (2016)\n7. Acar, A., Fereidooni, H., Abera, T., Sikder, A., Miettinen, M., Aksu, H., Conti,\nM., Sadeghi, A.R., Uluagac, A.S.: Peek-a-boo: I see your smart home activities,\neven encrypted! In: WiSec 2020 - 13th ACM Conference on Security and Privacy\nin Wireless and Mobile Networks. ACM, Austria (2020)\n8. Zhang, W., Meng, Y., Liu, Y., Zhang, X., Zhang, Y., Zhu, H.: Homonit: Monitoring\nsmart home apps from encrypted tra\u000ec. In: Proceedings of the SIGSAC Conference\non Computer and Communications Security. pp. 1074{1088. ACM, Canada (2018)\n9. Akestoridis, D.G., Harishankar, M., Weber, M., Tague, P.: Zigator: Analyzing the\nsecurity of zigbee-enabled smart homes. In: WiSec 2020 - 13th ACM Conference\non Security and Privacy in Wireless and Mobile Networks. ACM, Austria (2020).\n10. Zigbee Alliance: ZigBee Speci\fcation, 05-3474-21 edn. (2015)\n11. Zigbee Alliance: 2020 and Beyond, https://zigbeealliance.org/news_and_\narticles/zigbee-momentum/ . Last accessed Jun 2021\n12. Zigbee Alliance: Zigbee Cluster Library Speci\fcation, 07-5123-06 edn. (2016)\n13. Smart Home Enthusiast's Guide to ZigBee (2019), https://linkdhome.com/\narticles/what-is-zigbee-guide . Last accessed Jun 2021\n14. ZLeaks, https://github.com/narmeenshafqat1/ZLeaks\n15. Mon(IoT)r Lab, https://moniotrlab.ccis.neu.edu/ . Last accessed Jun 2021\n16. Wireshark bug, https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=9423\n17. Zigator CRAWDAD dataset CMU, (v. 2020-05-26), https://crawdad.org/cmu/\nzigbee-smarthome/20200526 . Last accessed May 2021\n18. TI CC2531 zigbee, https://www.ti.com/product/CC2531. Last accessed Jun 2021\n19. Zigbee Compliance Document of Lightify bulb (2014), https://zigbeealliance.\norg/zigbee_products/lightify-classic-a60-rgbw/ . Last accessed Jun 2021\n20. Zigbee Compliance Document of Sengled Bulb (2018), https://zigbeealliance.\norg/zigbee_products/sengled-element-3/ . Last accessed Jul 2021\n21. Tshark captures. https://tshark.dev/search/pcaptable/ . Accessed May 2021\n22. Pyshark, https://github.com/KimiNewt/pyshark . Last accessed Jun 202120 N. Shafqat et al.\n23. US-CERT: CVE. http://cve.mitre.org/ . Last accessed May 2021\n24. Ronen, E., Shamir, A., Weingarten, A.O., OFlynn, C.: Iot goes nuclear: Creating a\nzigbee chain reaction. In: IEEE Symposium on Security and Privacy, USA (2017)\n25. Herwig, S., Harvey, K., Hughey, G., Roberts, R., Levin, D.: Measurement and\nanalysis of hajime, a peer-to-peer iot botnet. In: Network and Distributed Systems\nSecurity Symposium. NDSS, USA (2019)\n26. Sugawara, T., Cyr, B., Rampazzi, S., Genkin, D., Fu, K.: Light commands: laser-\nbased audio injection attacks on voice-controllable systems. In: 29th USENIX Se-\ncurity Symposium. pp. 2631{2648. USENIX, USA (2020)\n27. Sun, Q., Simon, D.R., Wang, Y.M., Russell, W., Padmanabhan, V.N., Qiu, L.:\nStatistical identi\fcation of encrypted web browsing tra\u000ec. In: IEEE Symposium\non Security and Privacy. pp. 19{30. IEEE, USA (2002)\n28. Leu, P., Puddu, I., Ranganathan, A., \u0014Capkun, S.: I send, therefore i leak: In-\nformation leakage in low-power wide area networks. In: Proceedings of 11th ACM\nConference on Security & Privacy in Wireless and Mobile Networks, Sweden (2018)\n29. Liu, X., Zeng, Q., Du, X., Valluru, S.L., Fu, C., Fu, X.: Sni\u000bmislead: Non-intrusive\nprivacy protection against wireless packet sni\u000bers in smart homes. In: 24th Inter-\nnational Symposium on Research in Attacks, Intrusions and Defenses (2021)\n30. Matter, https://buildwithmatter.com/. Last accessed May 2021\n31. Anantharaman, P., Song, L., Agadakos, I., Ciocarlie, G., Copos, B., Lindqvist, U.,\nLocasto, M.E.: Iothound: environment-agnostic device identi\fcation and monitor-\ning. In: 10th International Conference on Internet of Things. ACM (2020)\n32. Thangavelu, V., Divakaran, D.M., Sairam, R., Bhunia, S.S., Gurusamy, M.: DEFT:\nA Distributed IoT Fingerprinting Technique. IEEE Internet of Things Journal 6(1),\n940{952 (2019)\n33. Cho, K.T., Shin, K.G.: Fingerprinting Electronic Control Units for Vehicle Intru-\nsion Detection. In: USENIX Security Symposium. pp. 911{927. USA (2016)\n34. Salman, O., Elhajj, I.H., Chehab, A., Kayssi, A.: A machine learning based frame-\nwork for iot device identi\fcation and abnormal tra\u000ec detection. Transactions on\nEmerging Telecommunications Technologies p. e3743 (2019)\n35. Earlence Fernandes, J.J., Prakash, A.: Security analysis of emerging smart home\napplications. In: 37th IEEE Symposium on Security and Privacy, USA (2016)\n36. Perdisci, R., Papastergiou, T., Alrawi, O., Antonakakis, M.: Iot\fnder: E\u000ecient\nlarge-scale identi\fcation of iot devices via passive dns tra\u000ec analysis. In: European\nSymposium on Security and Privacy (EuroS&P). pp. 474{489. IEEE, virtual (2020)\n37. Babun, L., Aksu, H., Ryan, L., Akkaya, K., Bentley, E.S., Uluagac, A.S.: Z-iot:\nPassive device-class \fngerprinting of zigbee and z-wave iot devices. In: IEEE In-\nternational Conference on Communications (ICC). pp. 1{7. IEEE, Ireland (2020)\n38. Gu, T., Fang, Z., Abhishek, A., Fu, H., Hu, P., Mohapatra, P.: Iotgaze: Iot secu-\nrity enforcement via wireless context analysis. In: IEEE Conference on Computer\nCommunications (INFOCOM). pp. 884{893. IEEE, virtual (2020)\n39. Gu, T., Fang, Z., Abhishek, A., Mohapatra, P.: Iotspy: Uncovering human pri-\nvacy leakage in iot networks via mining wireless context. In: IEEE 31st Annual\nInternational Symposium on Personal, Indoor and Mobile Radio Communications.\npp. 1{7. IEEE, virtual (2020)\n40. Brown, F., Gleason, M.: Zigbee hacking: Smarter home invasion with zigdiggity.\nIn: Black Hat USA (2019)\n41. Olawumi, O., Haataja, K., Asikainen, M., Vidgren, N., Toivanen, P.: Three prac-\ntical attacks against zigbee security: Attack scenario de\fnitions, practical experi-\nments, countermeasures, and lessons learned. In: 14th International Conference on\nHybrid Intelligent Systems. pp. 199{206. IEEE, Kuwait (2014)",
                    "summary": "",
                    "children": []
                }
            ]
        },
        {
            "id": "lastsummer",
            "title": "Vulnerabilities in Instant Messaging Services: Traffic Analysis Attacks and Countermeasures",
            "content": "",
            "summary": "Researchers have shown that despite the use of advanced encryption, popular IM applications such as Signal, Telegram, and WhatsApp leak sensitive information about their clients to adversaries merely monitoring their encrypted IM traffic. They have devised traffic analysis attacks enabling an adversary to identify participants of target IM communications with high accuracies, posing a significant, real-world threat to the users of such services. The researchers hope their study will encourage IM providers to integrate effective traffic obfuscation into their software and have designed a countermeasure system, called IMProxy that can be used by IM clients with no need for any support from IM providers.",
            "children": [
                {
                    "id": "lastsummer.p1",
                    "title": "Inferring Sensitive User Activities on Messaging Applications Through Traffic Analysis",
                    "content": "1\nI Still Know What Y ou Did Last Summer:\nInferring Sensitive User Activities on Messaging\nApplications Through Traffic Analysis\nArdavan Bozorgi, Alireza Bahramali, Fateme Rezaei, Amirhossein Ghafari, Amir Houmansadr,\nRamin Soltani, Dennis Goeckel, Don Towsley Fellow, IEEE\nAbstract \u2014Instant Messaging (IM) applications such as Signal, Telegram, and WhatsApp have become tremendously popular in recent\nyears. Unfortunately, such IM services have been targets of governmental surveillance and censorship, as these services are home to\npublic and private communications on socially and politically sensitive topics. To protect their clients, popular IM services deploy\nstate-of-the-art encryption. Despite the use of advanced encryption, we show that popular IM applications leak sensitive information\nabout their clients to adversaries merely monitoring their encrypted IM traffic, with no need for leveraging any software vulnerabilities of\nIM applications. Specifically, we devise traffic analysis attacks enabling an adversary to identify participants of target IM\ncommunications (e.g., forums) with high accuracies. We believe that our study demonstrates a significant, real-world threat to the users\nof such services.\nWe demonstrate the practicality of our attacks through extensive experiments on real-world IM communications. We show that\nstandard countermeasure techniques can degrade the effectiveness of these attacks. We hope our study will encourage IM providers\nto integrate effective traffic obfuscation into their software. In the meantime, we have designed a countermeasure system, called\nIMProxy that can be used by IM clients with no need for any support from IM providers. We demonstrate the effectiveness of IMProxy\nthrough simulation and experiments.\nIndex Terms \u2014Traffic Analysis, Secure Messaging Applications, Flow Correlation\n\u2726\n1 I NTRODUCTION\nINSTANT Messaging (IM) applications such as Signal [86],\nTelegram [95], and WhatsApp [107] have become enor-\nmously popular in recent years. Recent studies estimate\nthat over 3 billion people use mobile IM applications across\nthe world [43]. IM services enable users to form private\nand public social groups and exchange messages of various\ntypes, including text messages, images, videos, and audio\nfiles. In particular, IM applications are used extensively to\nexchange politically and socially sensitive content. As a\nresult, governments and corporations increasingly monitor\nthe communications made through popular IM services [2],\n[3], [79], [97].\nA notable example of oppressed IM services is Telegram\nwith over 500 million users globally [67], where a large\nfraction of its users come from countries with strict media\nregulations like Iran and Russia. In particular, Telegram is\nso popular in Iran that it has been estimated to consume\nmore than 60 percent of Iran\u2019s Internet bandwidth [11].\nConsequently, Iranian officials have taken various measures\nto monitor and block Telegram: from requesting Telegram\nto host some of its servers inside Iran to enable surveil-\nlance [97], to requesting Telegram to remove controversial\npolitical and non-political channels [97]. Eventually, Iran\nblocked Telegram entirely in April 2018 due to Telegram\u2019s\nnon-compliance. Despite this, statistics suggest only a small\ndecrease in Telegram\u2019s Iranian users who connect to it\nthrough various kinds of VPNs [44]. Telegram has also\nbeen blocked in Russia as Telegram operators refrained from\nhanding over their encryption keys to Russian officials for\nsurveillance [79]. Finally, in the light of Telegram\u2019s crucialrole in recent Hong Kong protests, there are unconfirmed\nreports [24], [81] that mainland Chinese and Hong Kong\nauthorities may have attempted to discover Hong Kong\nprotesters by misusing a Telegram feature that enabled them\nto map phone numbers to Telegram IDs.\nSignal is another example of IM applications with over\n40 million monthly active users. Known for its privacy and\nsecurity considerations, Signal has been the communication\nmethod of choice for activists, people in the hacker com-\nmunity, and others concerned about privacy. [87] In January\n2021, due the concerns over a notification of updated terms\nof service from WhatsApp application (which is the most\npopular IM in the world), Signal started to gain popularity\nas people are increasingly concerned with safeguarding\ntheir private information [89]. What makes Signal one of\nthe leading SIMs is its efforts to minimize the amount of\nmetadata each message leaves behind in addition to hiding\nthe content of the messages. In this regard, Signal recently\nhas deployed a feature called Sealed Sender [90] that conceals\nthe identity of the sender of messages. In January 2021, the\nIranian government started blocking all Signal traffic. In\nresponse, Signal added support for a simple TLS proxy in\nits Android version in order to let user bypass the network\nblock. [45]\nA Fundamental Vulnerability: Popular IM applications\nsuch as Signal, Telegram, and WhatsApp, deploy encryption\n(either end-to-end or end-to-middle) to secure user com-\nmunications. We refer to such services as secure IM (SIM)\napplications. In this paper, we demonstrate that despite theirThis article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "Researchers have shown that despite the use of advanced encryption, popular IM applications such as Signal, Telegram, and WhatsApp leak sensitive information about their clients to adversaries merely monitoring their encrypted IM traffic. They have devised traffic analysis attacks enabling an adversary to identify participants of target IM communications with high accuracies, posing a significant, real-world threat to the users of such services. The researchers hope their study will encourage IM providers to integrate effective traffic obfuscation into their software and have designed a countermeasure system, called IMProxy that can be used by IM clients with no need for any support from IM providers.",
                    "children": []
                },
                {
                    "id": "lastsummer.p2",
                    "title": "Traffic Analysis Attacks and Countermeasures on Secure Instant Messaging Services",
                    "content": "2\nuse of advanced encryption, popular IM applications leak sensitive\ninformation about their clients\u2019 activities to surveillance parties .\nSpecifically, we demonstrate that surveillance parties are\ncapable of identifying participants of target IM communi-\ncations (e.g., politically sensitive IM channels) with very\nhigh accuracies, and by only using low-cost traffic analysis\ntechniques. Note that our attacks are notdue to security\nflaws or buggy software implementations such as those\ndiscovered previously [33], [51], [80], [113]; while important,\nsuch security flaws are scarce, and are immediately fixed by\nIM providers once discovered. Instead, our attacks enable\nsurveillance by merely watching encrypted IM traffic of IM\nusers, and assuming that the underlying IM software is\nentirely secure. The key enabler of our attacks is the fact\nthat major IM operators do not deploy effective mechanisms\nto obfuscate traffic characteristics (e.g., packet timing and\nsizes), due to the impact of obfuscation on the usability and\nperformance of such services. We therefore argue that our\nattacks demonstrate a fundamental vulnerability in major in-the-\nwild IM services , and, as we will demonstrate, they work\nagainst all major IM services.\nWe believe that our attacks present significant real-world\nthreats to the users of believed-to-be-secure IM services,\nspecially given escalating attempts by oppressive regimes\nto crack down on such services, e.g., the recent attempts [2],\n[3], [24], [81] to identify and seize the participants of contro-\nversial IM communications.\nOur Contributions: We design traffic analysis attack algo-\nrithms for SIM communications; the objective of our attack\nis to identify the participants of target SIM communications.\nWhat enables our attack is that, widely-used SIM services do\nnot employ enough mechanisms to obfuscate statistical character-\nistics of their communications .\nWe start by establishing a statistical model for IM traffic\ncharacteristics. Such a model is essential in our search for\neffective traffic analysis attacks on SIM services. To model\nIM communications, we join over 1,000 public Telegram\nchannels and record their communications, based on which\nwe derive a statistical model for IM traffic features.\nBased on our statistical model for IM communications,\nwe use hypothesis testing [74] to systematically design effec-\ntive traffic analysis attack algorithms. Specifically, we design\ntwo traffic analysis attack algorithms; our first algorithm,\nwhich we call the event-based algorithm, relies on the sta-\ntistical model that we derive for SIM communications to\noffer an optimal matching of users to communications. Our\nsecond algorithm, which we call the shape-based algorithm,\ncorrelates the shapes of SIM traffic flows in order to match\nusers to target communications. Our shape-based algorithm\nis slower but offers more accurate detection performance\nthan the event-based algorithm for smaller values of false\npositive rates. In practice, the adversary can cascade the two\nalgorithms to optimize computation cost (and scalability)\nversus detection performance. Note that, as demonstrated\nthrough experiments, our statistical detectors outperform\ndeep learning based detectors trained on IM traffic when\nthe IM service has not deployed effective obfuscation. This\nis because, as also demonstrated in recent work [63], deep\nlearning traffic classifiers outperform statistical classifiers\nonly in network applications with non-stationary noise con-ditions (e.g., Tor), where statistical models becomes unreli-\nable. These attacks are closest in nature to flow correlation\nattacks.\nWe perform extensive experiments on live traffic of 5\npopular SIMs to evaluate the performance of our attacks.\nSignal, Telegram, WhatsApp, Wickr [108], and Wire [110]\nare our target SIMs. We demonstrate that our algorithms\noffer extremely high accuracies in disclosing the participants\nof target SIM communications. In particular, we show that\nonly 15 minutes of Telegram traffic suffices for our shape-\nbased detector to identify the participant of a target SIM\ncommunication with a 94% true positive (TP) and a 10\u22123\nfalse positive (FP) rate\u2014the adversary can reduce the FP\nrate to 5\u00d710\u22125by observing an hour of traffic (the adversary\ncan do this hierarchically, e.g., by monitoring the users\nflagged when using 15 minutes of traffic for longer traffic\nintervals). Using our event-based detector on 15 minutes of\ncaptured Signal traffic, we reach a 93% TP rate and a 6\u00d710\u22123\nFP rate. Similarly, we reach a 94% TP rate and a 6\u00d710\u22123FP\nrate on 15 minutes of captured Wire traffic.\nWe also study the use of standard traffic analysis coun-\ntermeasures against our attacks. In particular, we investi-\ngate tunneling SIM traffic through VPNs, mixing it with\nbackground traffic, adding cover IM traffic, and delaying\nIM packets. As expected, our experiments show that such\ncountermeasures reduce the effectiveness of the attacks at\nthe cost of additional communication overhead as well as\nincreased latency for SIM communications. For instance,\nwe find that tunneling Telegram traffic through VPN and\nmixing it with background web-browsing traffic reduces\nthe accuracy of our attack from 93% to 70%, and adding\ncover traffic with a 17% overhead drops the accuracy to\n62%. We argue that since many SIM users do not deploy\nsuch third-party countermeasures due to usability reasons,\nSIM providers should integrate standard traffic obfuscation\ntechniques into their software to protect their users against\nthe introduced traffic analysis attacks. In the meantime, we\nhave designed and deployed an open-source, publicly available\ncountermeasure system, called IMProxy, that can be used by\nIM clients with no need to any support from IM providers . We\nhave demonstrated the effectiveness of IMProxy through\nsimulations and experiments.\nIn summary, we make the following contributions:\n\u2022We introduce traffic analysis attacks that reliably\nidentify users involved in sensitive communications\nthrough secure IM services. To launch our attacks,\nthe adversary does not need to cooperate with IM\nproviders, nor does she need to leverage any security\nflaws of the target IM services.\n\u2022We establish a statistical model for regular IM commu-\nnications by analyzing IM traffic from a large number\nof real-world IM channels.\n\u2022We perform extensive experiments on the popular SIM\nservices of Signal, Telegram, WhatsApp, Wickr, and\nWire to demonstrate the in-the-wild effectiveness of our\nattacks.\n\u2022We study potential countermeasures against our at-\ntacks. In particular, we design and evaluate IMProxy,\nwhich is a proxy-based countermeasure system. IM-\nProxy works for all major IM services, with no need\nfor support from IM providers.This article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "This article discusses how popular instant messaging applications leak sensitive information about their users to surveillance parties. The authors demonstrate that surveillance parties can identify participants of target IM communications using low-cost traffic analysis techniques, and that major IM operators do not deploy effective mechanisms to obfuscate traffic characteristics. The authors argue that their attacks demonstrate a fundamental vulnerability in major in-the-wild IM services, and that they present significant real-world threats to the users of believed-to-be-secure IM services. The authors design traffic analysis attack algorithms for SIM communications and perform extensive experiments on live traffic of 5 popular SIMs to evaluate the performance of their attacks. They also study the use of standard traffic analysis countermeasures against their attacks and argue that SIM providers should integrate standard traffic obfuscation techniques into their software to protect their users against the introduced traffic analysis attacks.",
                    "children": []
                },
                {
                    "id": "lastsummer.p3",
                    "title": "Security Threats and Vulnerabilities in Instant Messaging Services",
                    "content": "3\n\u2022Our code and other artifacts are available online.1\n2 B ACKGROUND : SECURE INSTANT MESSAGING\n(SIM) A PPLICATIONS\nWe define a secure IM (SIM) service to be an instant\nmessaging service that satisfies two properties: (1) it deploys\nstrong encryption on its user communications (either end-\nto-end or end-to-middle), and (2) it is not controlled or\noperated by an adversary, e.g., a government. While our\nattacks also apply to non-secure IM applications, an adver-\nsary can use other trivial techniques to compromise privacy\nof non-secure IM services. For instance, if the operator of an\nIM service fully cooperates with a surveillant government,\ne.g., the WeChat IM service in China, the IM provider can\nlet the adversary identify target users with no need for\ntraffic analysis mechanisms. Similarly, an IM service with\nweak encryption can be trivially eavesdropped with no need\nfor sophisticated traffic analysis attacks. Table 1 overviews\nsome of the most popular SIM services.\n2.1 How SIM Services Operate\nArchitecture: All major IM services are centralized , as shown\nin Table 1. Therefore, all user communications in such\nservices are exchanged through servers hosted by the IM\nprovider companies, e.g., Telegram Messenger LLP (note\nthat some less popular services use a peer-to-peer architec-\nture, e.g., FireChat [92], Ring [78], and Briar [17]). Each IM\nservice has a server for authentication and key exchange.\nA database server stores message contents and other user\ninformation (possibly encrypted with client keys). Some\nIMs use Content Delivery Networks (CDNs) to run their\ndatabases to improve quality of service and resist attacks.\nExisting IM services use various messaging protocols for\nuser communications, including Signal [32], Matrix [10],\nMTProto [60], and Off-the-Record [16].\nPopular IM services intermediate all user communica-\ntions by having user traffic go through their servers. Such\na centralized architecture allows IM providers to offer high\nquality of services and solves critical issues like reaching to\noffline clients and clients behind NAT/firewalls. However,\nthis presents different privacy threats to the users, as IM\nservers are involved in all user communications. Some IM\nservices deploy end-to-end encryption to alleviate this, as\npresented below.\nSecurity Features: IM services use standard authentication\nmechanisms like authorization keys and public key certifi-\ncates to authenticate IM servers and peers [13], [14]. Also,\nthey use standard techniques to ensure the integrity of mes-\nsages. All major IM services encrypt user communications to\nprotect confidentiality [35]. Some IM providers additionally\ndeploy end-to-end encryption on user communications. This\nprevents IM operators from seeing the content of commu-\nnications; however, they can still see communication meta-\ndata, e.g., who is talking to whom and when. WhatsApp,\nSkype, Line, as well as Telegram and Facebook Messenger\noffer end-to-end encryption, while WeChat, Snapchat, and\nthe BlackBerry Messenger do not. Please refer to Johansen\net al. [46] for further discussion of other IM security features.\n1. https: //github .com/SPIN-UMass /IMProxy.2.2 Prior Security Studies of IM Services\nMetadata leakage: Coull and Dyer [25] are the first to apply\ntraffic analysis on messaging applications. They demon-\nstrate traffic analysis attacks that can infer various meta-data\nof a target Apple iMessage user, specifically, the operating\nsystem version, type of the IM action, and, to some degree,\nthe language of conversations. More recently, Park and\nKim [73] perform traffic analysis on the Korean KakaoTalk\nIM service, to identify users\u2019 online activities using basic\nclassification algorithms. Afzal et al. [4] identify the ac-\ntivities associated with the Signal app such as receiving\nor initiating calls, typing patterns, and media messages\nby analyzing a user\u2019s traffic patterns. Our work differs\nfrom these works in that the design of our detectors rely\non theoretical foundations and meticulous modeling of IM\ncommunications. Also, we believe that our attacks are able\nto reveal IM meta-data that is more sensitive than what was\nidentified by prior works. We demonstrate the applicabil-\nity of our attacks on several IM services, and design and\nevaluate tailored countermeasures.\nSecurity vulnerabilities: Johansen et al. [46] surveyed\ndifferent implementations of SIM protocols such as Signal,\nWhatsApp, and Threema, and evaluated their security and\nusability; they conclude that none of the studied applica-\ntions are infallible. Unger et al. [100] performed a compre-\nhensive study of instant messaging protocols focused on\ntheir security properties around trust establishment, con-\nversation security, and transport privacy. Also, Aggarwal\net al. [5] study the implementation of encryption in widely-\nused messaging applications.\nFurthermore, there have been various identity enumer-\nation attacks on messaging applications. In particular, as\nsome IM services use SMS text message to activate new\ndevices, an adversarial phone company can initiate and\nintercept such authorization codes to either identify users\nor access their accounts. Alternatively, unconfirmed re-\nports [24] suggest that mainland Chinese and Hong Kong\nauthorities may have attempted to discover Hong Kong\nprotesters by misusing a Telegram feature that allowed one\nto discover the Telegram IDs of phone contacts (therefore,\nmapping phone numbers to their Telegram IDs); Telegram\nhas promised to fix this issue through an update that will\nallow users to cloak their phone numbers [81].\nAlternatively, Schliep et al. [82] evaluate the security of\nthe Signal protocol against Signal servers. They identify\nvulnerabilities that allow the Signal server to learn the\ncontents of attachments, re-order and drop messages, and\nadd/drop participants from group conversations. Note that\ntheir study targets an entirely different adversary than ours,\ni.e., their adversary is a compromised/malicious Signal\nserver, whereas in our case the adversary is any third-\nparty who is able to wiretap encrypted IM traffic. Also,\ntheir attacks only work against Signal, whereas our attacks\napply to all major IM services as they rely on fundamental\ncommunication behavior of IM services.\nCommunication privacy: The centralized nature of popular\nSIM services makes them susceptible to various privacy\nissues. First, all user communications, including group com-\nmunications and one-on-one communications, are estab-\nlished with the help of the servers run by the SIM providers;This article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "This article discusses the vulnerabilities and privacy threats in instant messaging (IM) services. The authors define a secure IM service as one that deploys strong encryption on user communications and is not controlled by an adversary. They explain that while some IM services offer end-to-end encryption, they can still see communication metadata. The authors also highlight prior studies on metadata leakage, security vulnerabilities, and identity enumeration attacks on IM services. They conclude that the centralized architecture of popular SIM services makes them susceptible to various privacy issues.",
                    "children": []
                },
                {
                    "id": "lastsummer.p4",
                    "title": "Vulnerabilities of Instant Messaging Services",
                    "content": "4\nTABLE 1: Popular IM services [91]\nIM Service Monthly Users Based in Owned by End-to-End Encryption Centralized\nWhatsApp 2000 M United States Facebook \u2713 \u2713\nFacebook Messenger 1300 M United States Facebook \u2713(Secret Communications) \u2713\nWeChat 1251 M China Tencent \u2717 \u2713\nTelegram 550 M UAE Telegram Messenger LLP \u2713(Secret Chats) \u2713\nSnapchat 538 M United States Snap Inc \u2717 \u2713\nSignal 40 M United States Open Whisper Systems \u2713 \u2713\nWickr <1 M United States Amazon \u2713 \u2713\nWire <1 M European Union Wire Swiss GmbH \u2713 \u2713\ntherefore, SIM providers have access to the metadata of all\ncommunications, i.e., who is talking to whom, and channel\nownership and membership relationships. Recent works\nsuggest using various cryptographic techniques, such as\nprivate set intersection, to protect privacy against the central\noperators, e.g., for contact discovery [49], [58]. Second, even\nif an IM service provider is not malicious, its servers may be\ncompromised by malicious adversaries [31] or subpoenaed\nby governments, therefore putting client communication\nmetadata at risk.\nIn traditional SIM services, user communications are\nencrypted end-to-middle, i.e., between clients and SIM\nservers. In such services, the SIM providers can see not\nonly the users\u2019 communication metadata but also their\ncommunication contents. Recently, major SIM providers\nsuch as WhatsApp have started to support end-to-end en-\ncryption, therefore protecting communication content from\nSIM providers [1]. Poor/buggy implementations of some\nSIM services have resulted in various security flaws and\nmeta-data leakage threats despite their use of end-to-end\nencryption [33], [51], [65], [80], [113], e.g., through on/off\nnotifications in Telegram [33] and the recent WhatsApp\nvulnerability giving remote access to the hackers [113].\nCensorship: The centralized architecture of popular SIM\nservices makes their censorship trivial: censors can easily\nblacklist a handful of IP addresses or DNS records to block\nall communications to a target SIM service. A straightfor-\nward countermeasure to unblock censored SIM services is\nto use standard circumvention systems like VPNs [101],\nTor [28], and information-centric networks [59]. Alterna-\ntively, major SIM services allow the use of circumvention\nproxies to evade blocking, e.g., as built into the recent\nversions of the Telegram software after censorship attempts\nby Iranian and Russian authorities.\n3 A TTACK AND THREAT MODEL\nIn this work, we demonstrate a fundamental attack on\nIM services: our attacks are applicable to all major IM services,\nand are not due to buggy software implementations that can be\nfixed through software updates , as overviewed in Section 2.2.\nOur attacks are performed by an adversary who merely\nperforms traffic analysis . In this setting, the attacker does\nnot need to compromise or coerce the SIM provider, nor\ndoes she need to block the target IM service entirely. In-\nstead, the adversary performs traffic analysis to identify the\nparticipants of target IM communications in order to either\npunish the identified IM participants or selectively block the\ntarget communications. In particular, the adversary can use\ntraffic analysis to identify the administrators of controversial\npolitical or social IM channels and force them to shut down\ntheir channels (as seen in recent incidents [2], [3]). Alter-natively, the adversary can use our traffic analysis attacks\nto identify the members of controversial IM channels, and\nthereby selectively disrupt the access to the target channels.\n3.1 Introducing the Players\nThe adversary is a surveillance organization, e.g., an\nintelligence agency run by a government. The goal of the\nadversary is to identify (the IP addresses of) the members or\nadministrators (owners) of target IM communications .\nAtarget IM communication can be a public IM channel\n(e.g., a chat room) on politically or socially sensitive topics,\nor a private IM communication between target users, e.g.,\ndissidents and journalists.\nFor the adversary to be able to conduct the attack, she\nneeds to be intercepting the (encrypted) network traffic of\nthemonitored IM users , e.g., by wiretapping the ISPs of the\nmonitored users. Therefore, considering the Great Firewall\nof China as the adversary, it can only perform the attack on\nthe IM users residing inside China.\n3.2 Threat Model\nWe assume that the hosting IM service is a secure IM\n(SIM) service, as defined in Section 2. Therefore, the adver-\nsary does not leverage any security vulnerabilities of the\ntarget SIM service in performing the attack. For instance, the\nSIM system does not leak the IP addresses (or other sensitive\nmeta-data) of its clients to the adversary. Also, we assume all\ntraffic between IM clients and the IM servers to be encrypted\nwith strong encryption. Finally, the operators of the SIM\nservice do not cooperate with the adversary in identifying target\nmembers.\n3.3 How the Attack Is Performed\nFigure 1 illustrates the setup of the attack. Suppose\nthat the adversary aims at identifying the participants of\na specific IM communication, C.\nAdversary\u2019s ground truth: For any target communication\nC, the attacker needs to obtain some ground truth about the\ncontent of the communication. This can be done in three\nways:\n(1) If Cis an open (public) communication e.g., a public\ngroup or channel, the adversary joins C(as a member)\nand records the messages sent on Calong with their\nmetadata (e.g., time and size of the messages).\n(2) The adversary has joined Cand is capable of posting\nmessages to C. This can happen if Ca closed group that\ngives every member the ability to post messages, or this\ncould be because the adversary has gained an admin\nrole for C(e.g., the surveillance adversary has created a\nchannel on a politically sensitive topic to identify target\njournalists, or the adversary has arrested the admin of\na sensitive channel and is misusing her account). In this\nsetting, not only the adversary can record the messagesThis article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "This article discusses the vulnerabilities of instant messaging (IM) services, particularly in regards to traffic analysis attacks by surveillance organizations. The article explains that while some IM services do offer end-to-end encryption, SIM providers still have access to metadata, and servers may be compromised. The article also discusses the ease of censorship with centralized architecture, and offers circumvention systems as a countermeasure. The article then delves into the attack and threat model, introducing the adversary as a surveillance organization and outlining the goal of identifying the IP addresses of members or administrators of target IM communications. The article assumes a secure IM service and outlines how the attack is performed through obtaining ground truth about the content of the communication and performing traffic analysis. ",
                    "children": []
                },
                {
                    "id": "lastsummer.p5",
                    "title": "Traffic Analysis Attacks on Instant Messaging Services",
                    "content": "5\nSIM Server\nAdversary joins the target\nchannel or group chat as a\nmember , and records the\ncommunication messages.\nAdversary joins the target\nchannel or group chat with\nposting privileges, e.g., as an\nadmin. She records the\ncommunication's messages as\nwell as posts to the channel\nTarget User\nTarget User\nTarget User\nTarget User\nTarget User1\n2\nAdversary's Ground T ruth\nNot\nObservable to\nAdversaryAdversary W atching\nAdversary is in a one-on-one\nchat conversation with the\ntarget user . She sends\nmessages to the target user . \n3\nFig. 1: Alternative attack scenario\nposted to C, but also she can post her own messages to\nCwith her desired (distinct) traffic patterns.\n(3) The adversary is messaging the target user (e.g. an\nanonymous political account) in the one-on-one chat\nC, in which she can send her desired distinct traffic\npatterns.\nAdversary\u2019s wiretap: The adversary monitors the (en-\ncrypted) network traffic of IM users to identify (the IP\naddresses of) the members/admins of the target IM com-\nmuncation C. This can be performed by the adversary\nwiretapping the network traffic of the ISPs or IXPs he is\ncontrolling, e.g., by the Great Firewall of China. Alterna-\ntively, the adversary can wiretap the network traffic of\nspecific individuals (e.g., suspected activists), perhaps after\nobtaining a wiretapping warrant.\nAdversary makes decisions: The adversary uses a detection\nalgorithm (as introduced in Section 5) to match the traffic\npatterns of the wiretapped users to the ground truth traffic\npatterns of the target communication C.\n3.4 Related Traffic Analysis Attacks\nPrior work has studied various kinds of traffic analysis\nattacks in different contexts.\nFlow correlation In this setting, the adversary tries to\nlink obfuscated network flows by correlating their traffic\ncharacteristics, i.e., packet timings and sizes [26], [29], [38],\n[53], [64], [85], [106], [117]. Flow correlation has particularly\nbeen studied as an attack on anonymity systems like Tor [9],\n[62], [76], [104], [118]: the adversary can link the ingress\nand egress segments of a Tor connection (say, observed by\nmalicious Tor guard and exit relays) by correlating the traffic\ncharacteristics of the ingress and egress segments. Recently,\nNasr et al. [63] introduce a deep learning based technique\ncalled DeepCorr which learns a correlation function to\nmatch Tor flows, and outperforms the previous statistical\ntechniques in flow correlation.\nFlow watermarking This is the active version of flow\ncorrelation attacks described above. In flow watermarking,\nthe adversary encodes an imperceptible signal into traffic\npatterns by applying slight perturbations to traffic features,\ne.g., by delaying packets [40], [41], [75], [105], [116]. Com-\npared to regular (passive) flow correlation techniques, flowwatermarks offer higher resistance to noise, but require\nreal-time modification of network traffic, and are subject to\ndetection attacks.\nWebsite fingerprinting In Website Fingerprinting (WF), the\nadversary intercepts network connections of some moni-\ntored users and tries to match the patterns of the intercepted\nconnections to a set of target webpages. WF has particularly\nbeen studied as an attack on Tor. Existing WF techniques\nleverage various machine learning algorithms, such as k-\nNN, SVM, and deep neural networks to design classifiers\nthat match monitored connections to target web pages [20],\n[36], [37], [39], [47], [55], [70], [71], [77], [102].\nIntersection Attacks These attacks [6], [27], [29], [50] try\nto compromise anonymous communications by matching\nusers\u2019 activity/inactivity time periods. For instance, Kesdo-\ngan et al. [50] model an anonymity system as an abstract\nthreshold mix and propose the disclosure attack whose goal\nis to learn the potential recipients for any target sender.\nSide channel attacks Another class of traffic analysis\nattacks aims at leaking sensitive information from encrypted\nnetwork traffic of Internet services [8], [12], [15], [21],\n[34], [83], [94], [114]. For instance, Chang et al. [21] infer\nspeech activity from encrypted Skype traffic, Chen et al. [22]\ndemonstrate how online services leak sensitive client ac-\ntivities, and Schuster et al. [83] identify encrypted video\nstreams.\nOur Traffic Analysis Direction: Our attacks presented in\nthis paper are closest in nature to the scenario of flow correla-\ntion techniques . Similar to the flow correlation setting, our\nadversary intercepts a live target flow (e.g., by joining a\ncontroversial IM channel), and tries to match it to the traffic\npatterns of flows monitored in other parts of the network\n(to be able to identify the IP addresses of the members\nor admins of the target channel). However, we can not\ntrivially apply existing flow correlation techniques to the\nIM scenario, since the traffic models and communication\nnoise are entirely different in the IM scenario. We, therefore,\ndesign flow correlation algorithms tailored to the specific\nscenario of IM applications. To do so, we first model traffic\nand noise behavior in IM services, based on which we\ndesign tailored flow correlation algorithms for our specific\nscenario.\nNote that one could alternatively use techniques from\nthe intersection attacks literature to design traffic analysis\nattacks for IM services. However, flow correlation is sig-\nnificantly more powerful than intersection attacks, as flow\ncorrelation leverages not just the online/offline behavior of\nthe users, but also the patterns of their communications\nwhen they are online. Also, typical IM clients tend to remain\nonline for very long time intervals. Therefore, we expect\nattacks based on intersection to be significantly less reliable\n(or require very long observations to achieve comparable\nreliability) when compared to our flow correlation-based\nattacks.\n4 C HARACTERIZING IM C OMMUNICATIONS\nWe start by characterizing IM traffic and deriving a\nstatistical model for it. We will use our model to design\nattack algorithms that are able to identify the participants of\nSIM communications.This article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "This article discusses traffic analysis attacks on instant messaging services, specifically focusing on flow correlation techniques. The adversary intercepts a live target flow and tries to match it to the traffic patterns of flows monitored in other parts of the network to identify the IP addresses of the members or admins of the target channel. The article also characterizes IM traffic and derives a statistical model for it to design attack algorithms that are able to identify the participants of SIM communications.",
                    "children": []
                },
                {
                    "id": "lastsummer.p6",
                    "title": "Modeling Instant Messaging Traffic for Traffic Analysis Attacks",
                    "content": "6\n4.1 Main IM Messages\nIM services allow their users to send different types\nof messages; most commonly, text, image, video, file, and\naudio messages. IM messages are communicated between\nusers through one of the following major communication\nforms:\n\u2022Direct messages are one-on-one communications bet-\nween IM users. As mentioned earlier, popular IM ser-\nvices are centralized, therefore all direct messages are\nrelayed through the servers of the IM providers, and\nunless end-to-end encryption is deployed, the servers\ncan see communication contents.\n\u2022Private (Closed) Group Communications are com-\nmunications that happen between multiple users. In\ngroups, every member can post messages and read the\nmessages posted by others. Each group has an admin-\nistrator member who created the group and has the\nability to manage the users and messages. An invitation\nis needed for a user to join a closed group.\n\u2022Public (Open) Group Communications which are also\ncalled channels , are a broadcast form of communication\nin which one or multiple administrators can post mes-\nsages, and the members can only read or make limited\nreactions to these posts. Users can join public channels\nwith no need for an invitation.\nNote that some IM services offer other forms of commu-\nnications, like status messages, that are not relevant to the\nattacks discussed in our work.\n4.2 Data Collection\nSince among the services studied, Telegram is the only\none with publicly available communications in the form of\npublic channels, we used it to collect the content of real-\nworld public channels.\nWe use Telegram\u2019s API to collect the communications of\n1,000 random channels with different message rates, each\nfor a 24-hour span. For every collected Telegram message,\nwe extract the channel ID it was sent over, its timestamp, the\ntype of message (text, photo, video, audio or file), and the\nmessage size. Telegram has a limit of 50 on the number of\nnew channels a user can join every day. Therefore, we use\nmultiple Telegram accounts over several days to perform\nour data collection (also note that each Telegram account\nneeds to be tied to an actual mobile phone number, limiting\nthe number of accounts one can create). In Section 6.1,\nwe describe how we use the communication patterns we\ncollected for Telegram to generate traffic flows for the other\nSIMs.\n4.3 Modeling IM Communications\nWe use Telegram\u2019s data to derive a model for IM traffic\nfor two reasons; first, Telegram hosts a very large number of\npublic channels that we can join to collect actual IM traffic.\nThis is unlike other popular IM services where most group\ncommunications are closed/private. The second reason for\nchoosing Telegram for data collection is that Telegram has\nbeen at the center of recent censorship and governmental\nsurveillance attempts [2], [3], [96], [97], as it is home to a\nmultitude of politically and socially sensitive channels.\nAlthough we choose Telegram to obtain a statistical\nmodel for IM traffic, we show that our techniques perform\n0 200 400 600 800 1000 1200\nTime (Seconds)0200400600800100012001400Packet Length (Bytes)(a) Telegram\n0 200 400 600 800 1000 1200\nTime (Seconds)0200400600800100012001400Packet Length (Bytes) (b) Signal\nFig. 2: Comparing the shape of traffic on two major SIM\nservices; by sending the same sequence of IM messages,\nwe observe similar traffic bursts regardless of the service\nprovider.\nTABLE 2: Distribution of various message types\nType Count Volume (MB) Size range Avg. size\nText 12539 (29.4%) 3.85 (0.016%) 1B-4095B 306.61B\nPhoto 20471 (48%) 1869.57 (0.765%) 2.40KB-378.68KB 91.33KB\nVideo 6564 (15.4%) 232955.19 (95.3%) 10.16KB-1.56GB 35.49MB\nFile 903 (2.1%) 47.46 (0.019%) 2.54KB-1.88MB 52.56KB\nAudio 2161 (5.1%) 9587.36 (3.92%) 2.83KB-98.07MB 4.44MB\nsimilarly on other SIMs like WhatsApp and Signal. This is\nbecause these services implement limited traffic obfuscation,\nand therefore the shape of the traffic is similar across differ-\nent IMs. We have illustrated this in Figure 2, where the same\nstream of messages are sent over two different SIM services,\nresulting in similar traffic patterns.\nWe model two key features of IM traffic: inter-message\ndelays (IMDs) and message sizes. We also model the com-\nmunication latency of IM traffic. We use Maximum Likelihood\nEstimation (MLE) [69] to fit the best probability distribution\nfor each of these features.\nInter-Message Delays (IMDs): The IMD feature is the time\ndelay between consecutive IM messages in an IM commu-\nnication. In our model, we merge sent messages separated\nby less than a threshold, teseconds. We do this because\nextremely close messages create a combined traffic burst in\nthe encrypted IM traffic that cannot be separated by the\ntraffic analysis adversary. Such close messages can appear\n(infrequently) when an administrator forwards a batch of\nIM messages from another group. We also filter out the very\nlong IMDs that can correspond to long late-night inactivity\nperiods.\nWe show that the probability density function of IMDs\ncan be closely fitted to an exponential distribution using\nour MLE algorithm; Figure 3 shows the probability density\nfunction of IMDs for 200 IM channels with a message rate of\n130 messages per day. We interpret the exponential behavior\nof the IMDs to be due to the fact that messages (or message\nbatches) are sent independently in the channels (note that\nthis will be different for interactive one-on-one chats which\nwill be discussed in Section 6.1).\nAlso, we consider IMDs to be independent of the type\nand size of messages, since in practice there is no correlation\nbetween the time a message is sent and its type or size.\nMessages Sizes: Table 2 shows the size statistics and\nfrequencies of the five main message types in our collected\nIM messages. We use these empirical statistics to create a\nfive-state Markov chain, shown in Figure 6, to model the\nsizes of the messages sent in an IM communication stream.This article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "This paper discusses the modeling of instant messaging (IM) traffic for traffic analysis attacks. IM services allow users to send different types of messages, including text, image, video, file, and audio messages. The paper identifies three major communication forms for IM messages: direct messages, private (closed) group communications, and public (open) group communications. The paper explains that Telegram was used to collect the content of real-world public channels due to its large number of public channels and recent censorship and governmental surveillance attempts. The paper also discusses the modeling of two key features of IM traffic: inter-message delays (IMDs) and message sizes. The IMD feature is the time delay between consecutive IM messages in an IM communication, and the probability density function of IMDs can be closely fitted to an exponential distribution using the Maximum Likelihood Estimation (MLE) algorithm. The paper also shows that the probability density function of message sizes can be modeled using a five-state Markov chain based on empirical statistics.",
                    "children": []
                },
                {
                    "id": "lastsummer.p7",
                    "title": "IM Message Analysis and Attack Detection",
                    "content": "7\nFig. 6: Markov chain of IM message sizes\nWe obtain the empirical transition probability matrix of this\nMarkov model for the aggregation of all channels, as well\nas for groups of channels with similar rates.\nFinally, Figure 4 shows the Complementary Cumulative\nDensity Function (CCDF) of the normalized message sizes\nfor different message types (the sizes are normalized by\nthe maximum message size of each category). We observe\nthat different message types are characterized by different\nmessage size distributions.\nCommunication Latency: IM messages are delayed in tran-\nsit due to two reasons: network latency and the IM servers\u2019\nprocessing latency. To measure such latencies, we collect IM\ntraffic from 500 channels, each for one hour (therefore, 500\nhours worth of IM traffic) using Telegram\u2019s API. We then set\nup two IM clients, and send the collected IM traffic between\nthe two clients to measure the incurred communication\nlatencies. Using MLE, we find that transition latencies fit\nbest to a Laplacian distribution f\u00b5,b(x), where \u00b5is the\naverage and 2b2is the variance of the delay. Since network\ndelay cannot be negative, we consider only the positive\nparts of the Laplace distribution. Figure 5 shows a Quantile-\nQuantile (Q-Q) plot of the packet latencies against the best\nLaplace distribution.\n5 D ETAILS OF ATTACK ALGORITHMS\nWe design two algorithms for performing our attack (i.e.,\nto map monitored IM users to their communication). As dis-\ncussed in Section 3.4, our attack scenario is closest in natureto the scenario of flow correlation attacks. Therefore, the\ndesign of our attacks is inspired by existing work on flow\ncorrelation. Prior flow correlation techniques use standard\nstatistical metrics, such as mutual information [23], [119],\nPearson correlation [52], [85], Cosine Similarity [42], [64],\nand the Spearman Correlation [93], to link network flows by\ncorrelating their vectors of packet timing and sizes. We use\nhypothesis testing [74],2similar to state-of-the-art flow cor-\nrelation works [41], [42], we design optimal traffic analysis\nalgorithms for the particular setting of IM communications.\nIn contrast to flow correlation studies which use the features\nof network packets, we use the features (timing and sizes)\nofIM messages for detection.\nNote that the recent work of DeepCorr [63] uses a deep\nlearning classifier to perform flow correlation attacks on\nTor. They demonstrate that their deep learning classifier\noutperforms statistical correlation techniques in linking Tor\nconnections. In Section 6.5, we compare our statistical classi-\nfiers with a DeepCorr-based classifier tailored to IM traffic.\nAs we will show, when a SIM service has not deployed\nstrong traffic obfuscation, our statistical classifiers outperform\nsuch deep learning based classifiers, especially for shorter\nflow observations. Intuitively, this is due to the sparsity\nof events in typical IM communications, as well as the\nstationary nature of noise in IM communications in contrast\nto the scenario of Tor. Note that this fully complies with Nasr\net al. [63]\u2019s observation that DeepCorr only outperforms sta-\ntistical classifiers in non-stationary noisy conditions, where\nstatistical traffic models become inaccurate.\nOur hypothesis testing: Consider Cto be a target SIM\ncommunication (e.g., a public group on a politically sensi-\ntive topic). For each IM user, U, the attacker aims at deciding\nwhich of the following hypotheses is true:\n\u2022H0: User Uisnotassociated with the target communi-\ncation C, i.e., she is participant of communication C.\n\u2022H1: User Uisassociated with the target communication\nC, i.e., she is posting messages to that communication\nas an admin, or is a member of that communication and\ntherefore receives the communication\u2019s messages.\n2. Our approach is \u201cthreshold testing\u201d by some of the more strict\ndefinitions, however, we will use the term \u201chypothesis testing\u201d in\nthis paper as threshold testing falls into the general class of statistical\nhypothesis tests [74].\n0 10000 20000 30000 40000\nInter Message Delays (Seconds)0.000000.000250.000500.000750.001000.001250.001500.001750.00200PDFFitted Exponential Distribution\nHistogram of Inter Message Delays\nFig. 3: The PDF of inter-message de-\nlays and its fitted exponential distri-\nbution\n0.0 0.2 0.4 0.6 0.8 1.0\nNormalized message sizes to their maximum10\u2212410\u2212310\u2212210\u22121100CCDF\nCCDF of text message sizes\nCCDF of photo message sizes\nCCDF of video message sizes\nCCDF of \ufb01le message sizes\nCCDF of audio message sizesFig. 4: Complementary CDF (CCDF)\nof IM Size distributions for different\ntypes of messages\n0.25 0.50 0.75 1.00 1.25 1.50\nTheoritical quantiles0.51.01.52.0Ordered values\nFig. 5: The Quantile-Quantile plot of\ntransition delay and its fitted Lapla-\ncian distributionThis article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "This article presents an analysis of IM message sizes and communication latencies using a Markov model and Laplacian distribution. The authors design two algorithms for detecting flow correlation attacks on IM communications, using statistical metrics and hypothesis testing. They compare their statistical classifiers with a deep learning classifier and show that their classifiers outperform deep learning classifiers in non-stationary noisy conditions. The authors also present the PDF of inter-message delays and its fitted exponential distribution, as well as the CCDF of IM size distributions for different types of messages.",
                    "children": []
                },
                {
                    "id": "lastsummer.p8",
                    "title": "Designing Detectors for Encrypted SIM Communications",
                    "content": "8\nAs described in our threat model (Section 3), the adver-\nsary can only observe encrypted SIM communications bet-\nween users and SIM servers. Therefore, we design detectors\nthat use traffic features, i.e., IMDs and message sizes. In the\nfollowing, we describe two detector algorithms.\n5.1 Event-Based Detector\nOur first detector, the Event-Based Detector , aims at\nmatching SIM events in a target user\u2019s traffic to those of\nthe target communication C. An event e= (t, s)is a single\nSIM message or a batch of SIM messages sent with IMDs\nless than a threshold te(as introduced in Section 4.3). Each\nsingle SIM message can be one of the five types of image,\nvideo, file, text, or audio. tis the time that eappeared on\nthe SIM communication (e.g., sent to the public channel),\nandsis the size of e. Note that an SIM communication\ncan include SIM protocol messages as well (handshakes,\nnotifications, updates, etc.); however, such messages are\ncomparatively very small as shown in Figure 7, and thus\nthe detector ignores them in the correlation process. It also\nignores messages with type text since they usually only\ngenerate not more than a couple of MTU-sized packets\nmaking them hard to detect. Recall that the adversary is\nnot able to see plaintext events in the user\u2019s traffic due\nto encryption. Therefore, the first stage of our event-based\ndetector is to extract events based on the user\u2019s encrypted\nSIM traffic shape. Figure 8 depicts the components of our\nevent-based detector.\nEvent Extraction: Each SIM event, e.g., a sent image,\nproduces a burst of MTU-sized packets in the encrypted\ntraffic, i.e., packets with very small inter-packet delays. This\nis illustrated in Figure 7: SIM events such as images appear\nas traffic bursts, and scattered packets of small size are SIM\nprotocol messages like notifications, handshakes, updates,\netc. Therefore, the adversary can extract SIM events by\nlooking for bursts of MTU-sized packets, even though she\ncannot see packet contents due to encryption. We use the\nIMD threshold teto identify bursts. Any two packets with\ndistance less than teare considered to be part of the same\nburst. Note that teis a hyper-parameter of our model and\nwe discuss its choice in Section 4.3. For each burst, the\nadversary extracts a SIM event, where the arrival time of the\nlast packet in the burst gives the arrival time of the event,\nand the sum of all packet sizes in the burst gives the size of\n050010001500Tra\ufb03c of Uncorrelated User\n0 200 400 600 800 1000 1200\nTime (Seconds)050010001500Tra\ufb03c of correlated UserPacket Length\nVideo\nMessagePhoto\nMessageAudio\nMessageFile \nMessageTimeSequence of Messages in the Channel\nFig. 7: Event extraction: IM Messages sent/received by a target\nuser create bursts of (encrypted) packets; the adversary can\nextract events from packet bursts.\nEvent\nExtractionCorrelation\nFunctionComparing\nto a\nThresholddecision/H0H1Target Users'\nTraf\ufb01c Target Users'\nFlowsComputing\nCorrelation\nMetric\nTarget Channel's\nTraf\ufb01cTarget\nChannel's\nFlowFig. 8: Event-based detector\nthe event. Two SIM messages sent with an IMD less than te\nare extracted as one event. Similarly, the adversary combines\nevents closer than tewhen capturing them from the target\ncommunication.\nForming Hypotheses: We call a one-sided SIM commu-\nnication an SIM flow. Therefore, a flow either consists of\nthe packets sent by a user to an SIM server, or the packets\nreceived by the user from the SIM server. We represent a flow\nwith nevents as f={e1, e2, . . . , e n}, where ei= (ti, si)is\ntheith event.\nConsider a user Uand a target communication C.\nSuppose that the adversary has extracted flow f(U)=\n{e(U)\n1, e(U)\n2, . . . , e(U)\nn}for user U(through wiretapping), and\nflow f(C)={e(C)\n1, e(C)\n2, . . . , e(C)\nn}for the target commu-\nnication C(using her ground truth). The detector aims at\ndeciding whether user Uis participant of C. We can re-state\nthe adversary\u2019s hypotheses presented earlier in this section\nas follows:\n\u2022H0: User Uis not a participant of the target communi-\ncation; hence, f(C)andf(U)are independent.\n\u2022H1: User Uis a participant of the target communication\nC; therefore, the user flow f(U)is a noisy version of the\ncommunication flow f(C).\nTherefore, we have\n(\nH0:t(C)\ni=t(\u2217)\ni+d(\u2217)\ni, s(C)\ni=s(\u2217)\ni,1\u2264i\u2264n\nH1:t(C)\ni=t(U)\ni+d(U)\ni, s(C)\ni=s(U)\ni,1\u2264i\u2264n\nwhere f(\u2217)={e(\u2217)\n1, e(\u2217)\n2, . . . , e(\u2217)\nn}is the flow of a user U\u2032\u0338=\nUwho is nota participant of communication C. Also, d(\u00b7)\niis\nthe latency applied to the timing of the ith event. Note that\nIM message sizes do not change drastically in transit, and\nthe order of messages remains the same after transmission.\nDetection Algorithm: The adversary counts the number of\nevent matches between the user flow f(U)and the commu-\nnication flow f(C). We say that the ith communication event\ne(C)\nimatches some event e(U)\njinf(U)if:\n\u2022e(C)\niande(U)\njhave close timing: |t(C)\ni\u2212t(U)\nj|<\u2206; and\n\u2022e(C)\niande(U)\njhave close sizes: |s(C)\ni\u2212s(U)\nj|<\u0393\u00d7s(C)\ni.\nwhere \u2206and\u0393are thresholds values for the timing and\nsizes of events. Note that even though the sizes of SIM mes-\nsages do not change in transmission, the event extraction\nalgorithm introduced earlier may impose size modifications,\nas network jitter is able to divide/merge event bursts (i.e.,\na burst can be divided into two bursts due to network jitter\nor two bursts can be combined due to the small bandwidth\nof the user). It should also be noted that defining closeness\nof event sizes as a ratio of the size of the event rather than\nusing a fixed-size threshold improves the performance of\nthe detector.\nFinally, the adversary calculates the ratio of the matched\nevents within a flow as r=k/n, where kis number ofThis article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "This article discusses the design of detectors for encrypted SIM communications between users and SIM servers. The detectors use traffic features, such as IMDs and message sizes, to match SIM events in a user's traffic to those of a target communication. The article describes two detector algorithms, the Event-Based Detector and the Flow-Based Detector, and explains how they form hypotheses to determine whether a user is a participant in a target communication. The detectors are designed to maintain privacy by only observing encrypted traffic and ignoring SIM protocol messages and messages with type text. The article also discusses the hyper-parameters of the model and the threshold values for timing and sizes of events.",
                    "children": []
                },
                {
                    "id": "lastsummer.p9",
                    "title": "Shape-Based Detection for SIM Attacks",
                    "content": "9\nTABLE 3: The empirical value of p1measured for different\nclient bandwidths\nClient Bandwidth\n(Mbps)p1\n0.1 0.824\n0.5 0.902\n1 0.921\n10 0.974\n100 0.983\nmatched events and nis the total number of events in\nthe flow of target communication. The detector decides the\nhypothesis by comparing to a threshold: r=k\nnH1\u2277\nH0\u03b7where\n\u03b7is the detection threshold.\nAnalytical Bounds: We first derive an upper-bound on\nthe probability of false positive ( PFP), i.e., the probability\nthatH1is detected when H0is true (Type I error). Let\np0be the probability that a message with size s(C)\niand\ntime t(C)\nimatches an event in f(U)when H0is true, i.e.,\nthere exists only one message whose time t(\u2217)\njsatisfies\nt(C)\ni\u2264t(\u2217)\nj\u2264t(C)\ni+ \u2206 and has the same size label as s(C)\ni.\nFrom our observations, p0= 0.002. This Type I error occurs\nif more than \u03b7\u00b7nevents in f(C)match f(U), when H0is true.\nThis is equivalent to the case that less than n\u2212\u03b7\u00b7nevents\ninf(C)do not match f(U)when H0is true. Consequently,\nPFP=P(k\u2265\u03b7n|H0) =P(n\u2212k\u2264n\u2212\u03b7n|H0),\n=F(n\u2212\u03b7n;n,1\u2212p0),\n\u2264\u00121\u2212\u03b7\np0\u0013\u2212n+n\u03b7\u03b7\u0012\u03b7\n1\u2212p0\u0013\u2212n\u03b7\n,\n(1)\nwhere F(r;m, p) = P(X\u2264r)is the cumulative density\nfunction of a Binomial distribution with parameters m, p ,\nand the last step follows from the following inequality\nwhich is tight when pis close to zero [7]:\nF(r;m, p)\u2264\u0012r/p\np\u0013\u2212k\u00121\u2212r/m\n1\u2212p\u0013k\u2212m\n(2)\nNext, we upper-bound the probability of false negatives\n(PFN), i.e., the probability that H0is detected when H1is\ntrue, which occurs when less than kmessages of f(C)match\nf(U). Let p1be the probability of the case that an event of\nf(C)matches f(U)when H1is true (Type II error).\nEven though we mentioned earlier in this section that\nwhen H1is true, a delayed version of each event of f(U)\nappears in f(C), the bandwidth of the target user can affect\nthe burst extraction process. As explained earlier in this\nsection, we merge bursts of packets for messages whose\nIMD is less than te. Hence, suppose that the time it takes\nfor the user to send a message is large enough to make the\nIMD between the current message and the next one less than\nte. Therefore, these two consecutive messages are combined\nin one burst. Table 3 shows the value of p1observed from\nour data for different bandwidths. Since the bandwidth of\nour experiments is 1Mbps, p1= 0.921.\nEvent\nExtractionTraf\ufb01c\nNormalizationComparing\nto a\nThresholddecision/H0H1Target Users'\nTraf\ufb01c Target Users'\nFlowsTarget\nUsers'\nTraf\ufb01c Bars\nTarget Channel's\nTraf\ufb01cTarget\nChannel's\nFlowTarget\nChannel's\nTraf\ufb01c BarCorrelation\nFunctionComputing\nCorrelation\nMetricFig. 9: Shape-based detector\nNote that Type II error occurs when less than \u03b7\u00b7n\nmessages of f(C)match f(U)when H1is true. Therefore,\nPFN=P(k\u2264\u03b7n|H1) =F(\u03b7n;n, p1)\n\u2264\u0012\u03b7\np1\u0013\u2212n\u03b7\u00121\u2212\u03b7\n1\u2212p1\u0013\u03b7n\u2212n\n,(3)\nwhere the last step follows from (2).\n5.2 Shape-Based Detector\nWe design a second detector called the shape-based de-\ntector. This detector links users to SIM communications\nby correlating the shape of their network traffic, where\ntraffic shape refers to the vector of packet lengths over\ntime. Figure 9 illustrates the four stages of the shape-based\ndetector.\nEvent Extraction: The first stage of the shape-based detector\nis to extract SIM events from network traffic, which is\nperformed similar to what was described earlier for the\nevent-based detector. As described in the following, we do\nthis in a way that accounts for the different bandwidths of\nthe users being correlated.\nNormalizing Traffic Shapes: The shape-based detector con-\nverts the extracted events into normalized traffic shapes by\nreplacing each event with a traffic bar. The reason for doing\nso is that the shape of an IM event (e.g., the corresponding\npacket burst) is a function of user network bandwidths; our\ntraffic normalization removes the impact of user bandwidth,\nand therefore the adversary can correlate traffic shapes with\nno knowledge of the underlying users\u2019 bandwidths.\nTo perform this normalization, we replace each event\n(i.e., each burst) with a traffic bar whose width is 2\u00d7te,\nwhere teis the threshold used during event extraction as\ndiscussed in section 5.1. We choose this value to reduce the\nchances of overlaps between consecutive bars. To capture\nthe sizes of events in traffic normalization, the height of each\nbar is chosen such that the area under the bar is equal to\nthe size of the event. Our shape normalization also reduces\ncorrelation noise by removing small traffic packets that are\nnot part of any SIM events.\nTo form the new normalized shape of traffic, we divide\neach bar into smaller bins of width ts, the value of which\nis discussed in Section 6.1, and with a height equal to the\nheight of the corresponding bar. Therefore each bar consists\nof a number of bins of equal width and height. Furthermore,\nwe put bins with the same width tsand height 0 between\nthese bars. By doing so, after the traffic normalization, the\nnew shape of traffic will be a vector of heights of bins over\ntime.\nCorrelating Normalized Traffic Shapes: Our shape-\nbased detector correlates the normalized shapes of two\ntraffic streams of target communication Cand user U\nto decide if they are associated. Suppose that b(C)=This article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "This article discusses the design and implementation of a shape-based detector for SIM attacks. The detector extracts SIM events from network traffic, normalizes the traffic shapes, and correlates the normalized shapes of two traffic streams to decide if they are associated. The article also provides analytical bounds on the probabilities of false positives and false negatives in the detection process. The shape-based detector reduces the impact of user bandwidth on the correlation of traffic shapes and removes small traffic packets that are not part of any SIM events. Overall, the detector provides an effective defense against SIM attacks.",
                    "children": []
                },
                {
                    "id": "lastsummer.p10",
                    "title": "Detecting SIM Card Swap Attacks on Instant Messaging Services",
                    "content": "10\n{b(C)\n1, b(C)\n2, . . . , b(C)\nnC}andb(U)={b(U)\n1, b(U)\n2, . . . , b(U)\nnU}are\nthe respective vectors of heights of bins associated with the\ntarget communication and user being tested, where nCand\nnUare the number of events in target communication and\nuser flows, respectively. We use the following normalized\ncorrelation metric:\ncorr= 2\u00d7Pn\ni=1b(C)\nib(U)\niPn\ni=1(b(C)\ni)2+Pn\ni=1(b(U)\ni)2(4)\nwhere n= min( nC, nU). Note that corr returns a value\nbetween 0 and 1, which shows the similarity of the two\ntraffic shapes (1 shows the highest similarity). Finally, the\ndetector makes its decision by comparing corr to a thresh-\nold,corrH1\u2277\nH0\u03b7, where \u03b7is the detection threshold.\n6 A TTACK EXPERIMENTS\n6.1 General Setup\nWe design our experimental setup to perform our attacks\nin the setting of Figure 1, and based on the threat model\nof Section 3. We use two SIM clients using different SIM\naccounts (e.g., Telegram accounts) that are running IM soft-\nware on two separate machines. One of these IM clients is\nrun by the adversary, and the other one represents the target\nclient.\nFor Telegram, due to the large number of public channels\navailable, we use the first type of ground truth in Figure 1\n(adversary joins the target channel as a reading-only mem-\nber). The adversary client joins target channel C, (e.g., a\npublic political Telegram channel) and records the metadata\nof all the SIM communications of C, i.e., the timing and sizes\nof all messages sent on that channel. The target client may\nor may not be a member/admin of the target channel C.\nOther than Telegram, the other SIM services do not\nhave public communications (group chats or channels). For\nthose SIM services, we focus on one-on-one communication\nand use the third type of ground truth in Figure 1 where\nadversary sends messages to the target in a one-on-one chat.\nIn this scenario, the adversary chooses the content of the\nmessages she sends to the target client, including the timing\nand sizes. She can also record the timing and sizes of the\nmessages she receives from the target client.\nUnlike public communications (e.g. channels in Tele-\ngram), one-on-one communications in these SIM services\nare private. Therefore, we had to generate the content of\ncommunications, and have the adversary\u2019s client send them\nto her target. To generate the content of the messages,\nwe generate random content that matches the size and\nfrequency statistics of the five main message types collected\nfrom Telegram, shown in Table 2. As stated in [54], to gen-\nerate the IMDs, we used the Pareto Type I distribution with\nscale and shape parameters of 5000 millisecond and 0.93\nrespectively. The result was a total of 267 hours of one-on-\none communication traces which included a total of 25367\nmessages, 17948 of which are media (non-text) messages.\nWhen sending the messages, we record the timestamp and\nat the same time, we capture the network traffic of the\ntarget\u2019s machine using tcpdump. It is not necessary to send\nmessages in the other direction (from target\u2019s client to the\nadversary) since as a result of symmetry, we could assumethat message was sent from the adversary to the target and\nit would have the same timestamp, size, and network traffic\npattern.\nGenerating Traffic: With all of the studied SIM services,\nthe adversary is not able to see the contents of the target\nclient\u2019s communications by intercepting her traffic (due to\nencryption), however she can capture the encrypted traffic\nof the target client. The adversary then uses the detection\nalgorithms introduced in Section 5 to decide if the target\nuser is associated with the target communication C. In a\nreal-world setting, the adversary will possibly have multiple\ntarget communications, and will monitor a large number of\nsuspected clients.\nWhatsApp The two clients were running on separate virtual\nmachines running Ubuntu 18.04. We use Selenium [84]\nto connect to WhatsApp\u2019s web application and send 100\nhours of generated one-on-one traces. This results in a more\nrealistic packet capture as the target\u2019s client would have\nto click to download media messages upon arrival while\nsubsequent messages are arriving.\nSignal The two clients run on separate virtual machines\nrunning Ubuntu 20.04. We use temporary phone numbers\nto create Signal accounts. Then on both machines, we use\nversion 0.8.4.1 of signal-cli [88], an open source command\nline and dbus interface for the Signal messenger to write a\nPython program for the adversary\u2019s machine to send all of\nthe generated one-on-one traces and a separate Python pro-\ngram on the target\u2019s machine to receive those messages. Our\ntarget\u2019s client starts downloading media messages while\nsubsequent messages are arriving.\nWire Wire provides the following messaging solutions: Wire\nPersonal, Wire for Free, Wire for Enterprise, and Wire for\nGovernments. In this work we use Wire for Free to perform\nour experiments. In the rest of the paper we refer to Wire\nPersonal as Wire. Wire offers two types of messaging: one-\non-one and group communications. We use different email\naddresses to create Wire accounts for these experiments. We\nuse Selenium to connect to Wire\u2019s web application [111] to\nautomate sending all of the generated one-on-one traces.\nWhen sending photos on Wire\u2019s web application, instead\nof using Wire\u2019s option to send compressed photos, we send\nthem as files. Because otherwise, the order by which the me-\ndia is downloaded on the target\u2019s client would be different\nfrom the order of the arrived messages, which would be as a\nresult of Wire automatically downloading photos (not files)\nas they arrive. At the time of the experiments, there was no\noption to turn off this function.\nWickr Based on different customer needs, Wickr has de-\nveloped several secure messaging apps: Wickr Me, Wickr\nPro, and Wickr Enterprise. In this work we use Wickr Pro to\nperform the experiments. Note that in the rest of the paper\nwe refer to Wickr Pro as just Wickr. Wickr offers two types of\ngroup communications: regular group communication and\nsecure room communication. A room is a private group.\nThe main difference between group communication and a\nroom is that in a room there is a subset of participants\ncalled the administrators who can add new participants to the\nroom or remove any participants from the room. In a group\ncommunication, only participants may remove themselves.\nWe use the Wickr IO Integration Gateway to automate theThis article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "This paper presents a method for detecting SIM card swap attacks on instant messaging services. The method uses a normalized correlation metric to compare the traffic patterns of the target communication and user being tested. The paper also describes the experimental setup used to perform the attacks, which involved using two SIM clients running IM software on separate machines. The experiments were performed on four different messaging services: Telegram, WhatsApp, Signal, and Wire. The results show that the proposed method is effective in detecting SIM card swap attacks on instant messaging services.",
                    "children": []
                },
                {
                    "id": "lastsummer.p11",
                    "title": "Inference Attacks on Instant Messaging Services: Evaluating the Performance of Event-Based and Shape-Based Detectors",
                    "content": "11\nprocess of the experiments. We use the Wickr IO Docker\nContainer [109] to set up the Web Interface REST API\nintegration enabling the communication with Wickr client\nusing Python.\nParameter Selection. We choose burst detection threshold\naste= 0.5sbased on the empirical distribution of network\njitter. Also, we set tsof the shape-based detector to 0.01s,\nas it leaves enough separation between two consecutive\nIM messages. Note that the optimum values of \u2206and\u0393\nin the event-based algorithm are different for each SIM\nexperiment.\nEthics. We performed our inference attacks only over public\nIM channels or one-to-one communications between our\nown accounts; therefore, we did not capture any private IM\ncommunications. Also, we performed our attacks only on\nour own IM clients, but no real-world IM clients. Therefore,\nour experiments did not compromise the privacy of any\nreal-world IM members or admins.\nSynchronization As the adversary\u2019s clock may be skewed\nacross her vantage points, our adversary uses a simple\nsliding window to mitigate this: for the first 10 seconds of\ntraffic, the adversary slides the two flows being compared\nwith 0.5 second steps, and uses the maximum correlation\nvalue.\n6.2 Experiments in Normal Network Conditions\nWe experiment our attacks for each SIM (fully complying\nwith the ethical considerations of Section 6.1).\nEvent-Based Detector Figure 11 shows the ROC curve of\nthe event-based algorithm using Signal traffic data for 4\ndifferent observation lengths. We can see that, as expected,\nlonger traffic observations improve the accuracy of the detector .\nFor instance, the event-based detector offers a TP = 0.58\nand FP = 5.4\u00d710\u22123with 3 min observation, while 30\nmins of observation increases the TP to close to TP = 0.98.\nTo calculate FP , we pair each flow of messages with traces\nof every other flow and feed it to the algorithm to see if\nit detects any matches. In practice, an adversary can deploy\nthe attack with hierarchical observation intervals to optimize\naccuracy and computation . For instance, the adversary can\nmonitor a mass of IM users for 15 mins of observation;\nthen the adversary will monitor only the clients detected\nwith 3 mins observations for longer time periods, e.g., 30\nmins, to improve the overall FP performance while keeping\ncomputations low.\nFurthermore, Figure 12 compares the performance of the\nevent-based detector on our target SIMs. As can be seen,\nwith Signal and Wire, the detector has a worse performance\ncompared to other SIMs. It appears that they apply obfus-\ncation algorithms on their traffic flows. However, we could\nnot find any official documentation about their obfuscation\ntechniques.\nShape-Based Detector We also experiment our shape-based\ndetector on each SIM. Figure 13 compares the performance\nof the event-based and shape-based detectors on Wickr\ntraffic for 3 mins and 15 mins of observed traffic.\nAs can be seen, the shape-based detector outperforms the\nevent-based detector for smaller values of false positive rates . For\ninstance, for a target true positive rate of 0.8, the shape-\nbased detector offers a false positive of 1.5\u00d710\u22123compared\n10\u2212610\u22124\n10\u22122100\nFalse Positive Rate0.00.20.40.60.81.0True Positive Rate\nActual Telegram traffic\nSimulated Telegram traffic\nAnalytical resultsFig. 10: Comparing the analytical upper bounds of the\nevent-based detector with empirical results (for 15 minutes\nof Telegram traffic).\nTABLE 4: The attack performances for one correlation.\nMethod # of CPU cyclesOne correlation\ntime\nShape-based 34 431 709 34431.70 ms\nEvent-based 123 962 123.96 ms\nto4\u00d710\u22123of the event-based detector (with 15 mins of\nobservation). The reason for this performance gap is the\nimpact of event extraction noise on the event-based detector.\nSuch noise has smaller impact on the shape-based detector\nas it correlates the shape of traffic flows. For higher false\npositive rates, the performance is opposite and the event-\nbased detector has more true positive rate than the shape-\nbased detector.\nNote that for our event-based detector in Figure 13, for\nshort traffic observations (e.g., 3 mins) we cannot observe\nsmall FPs in our ROC curve. This is because the event-based\ncorrelation uses the number of matched events, which is\nvery coarse-grained due to the limited number of events in\nshort (e.g., 3 minutes) intervals. We use our analytical upper-\nbounds (derived in (1) and (3)) to estimate the performance\ntrend for smaller false positive values for Telegram traffic in\nFigure 10.\nIn terms of the performance time, our event-based detector\nis two orders of magnitude faster than the shape-based detector .\nTable 4 compares the number of CPU cycles each of the two\ndetectors take to calculate the correlation of a pair of 900\nsecond Signal flows, as well as the correlation times of the\ntwo detectors. The main reason for this difference is that the\nevent-based correlator uses the discrete time-series of event\nmetadata for its correlation, while the shape-based detector\nuses traffic histograms over time.\n6.3 Experiments in Poor Network Conditions\nTo evaluate the effect of the bandwidth of the target\u2019s\ndevice on the performance of the event-based detector, we\ncollected traffic for each SIM with the target device\u2019s band-\nwidth limited to 1Mbps, 5Mbps, and in some cases 10Mbps.\nWe used Wondershaper [112] to limit the bandwidth on\ntarget\u2019s VM. We then tuned the parameters of the event-\nbased detector to better detect events of the traffic of the\nclient with limited bandwidth.\nFigure 14 shows the performance of the event-based\ndetector on Signal and Wire when the bandwidth of the\ntarget user is limited to 10 Mbps and 5 Mbps comparedThis article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "Researchers conducted experiments on the performance of event-based and shape-based detectors for inference attacks on instant messaging services. The experiments were conducted using the Wickr IO Docker Container to set up the Web Interface REST API integration enabling the communication with Wickr client using Python. Burst detection threshold aste was chosen based on the empirical distribution of network jitter. The shape-based detector outperformed the event-based detector for smaller false positive rates. The event-based detector was found to be two orders of magnitude faster than the shape-based detector.",
                    "children": []
                },
                {
                    "id": "lastsummer.p12",
                    "title": "Performance Evaluation of Event-Based Algorithm for Flow Correlation Attacks on Instant Messaging Services",
                    "content": "12\n10\u2212310\u2212210\u22121\n100\nFalse Positive Rate0.00.20.40.60.81.0True Positive Rate\n3 minutes of traffic\n5 minutes of traffic\n15 minutes of traffic\n30 minutes of traffic\nFig. 11: The performance of the\nevent-based detector on Signal traffic\nfor different traffic lengths.\n10\u2212410\u2212310\u2212210\u22121100\nFalse Positive Rate0.00.20.40.60.81.0True Positive Rate\nWickr\nTelegram\nSignal\nWire\nWhatsAppFig. 12: Performance of the event-\nbased detector on different SIMs (15\nmins of observed traffic).\n10\u2212610\u2212510\u2212410\u2212310\u2212210\u22121100\nFalse Positive Rate0.00.20.40.60.81.0True Positive Rate\nEvent-based - 3 minutes\nEvent-based - 15 minutes\nShape-based - 3 minutes\nShape-based - 15 minutesFig. 13: Comparing event-based and\nshape-based detectors on Signal traf-\nfic.\nto when there is no imposed limits. As expected, lower\nbandwidth corresponds with lower performance of the de-\ntector on both SIMs. With smaller bandwidths, there are\nmore overlaps between events which causes more errors\nin the event extraction process. A similar pattern existed\nin our experiments for Wickr, Telegram, and WhatsApp.\nWhen we limit the bandwidth to 1Mbps, the performance\ndrops significantly making the detector ineffective. This is\nexpected as the the SIMs become almost unusable with a\n1Mbps bandwidth when sending media messages.\n6.4 Experiments to evaluate the effect of adversary\u2019s\nlocation\nWe also evaluate the performance of our event-based\nalgorithm while tunneling adversary\u2019s traffic through VPNs\nin different locations. This is to evaluate the effect of ad-\nversary\u2019s location with respect to its target. We tunnel the\ntraffic through VPNs in three locations: Japan, South Africa,\nand Turkey. In setups where VPN is used, either a TorGurad\nVPN client [99] or a NordVPN client [66] is installed on the\nsender (adversary) virtual machine and the VPN has been\nconnected prior to sending messages. Figure 15 shows the\nperformance of the event-based detector while observing 15\nminutes of Signal\u2019s traffic as adversary\u2019s traffic is tunneled\nthrough a VPN server in different locations. We believe the\npoor performance of the event-based detector when traffic\nwas tunneled through the VPN server in South Africa is due\nto the very low bandwidth of the connection through that\nVPN server (close to 1Mbps). As can be seen, tunneling the\ntraffic through VPN affects the performance of the detector\nto some degree but does not make it ineffective as VPNs do\nnot obfuscate the traffic patterns of SIMs. VPNs however,\nadd a delay to adversary\u2019s traffic. This indicates that when\ndirectly sending messages to its target, the location of the\nadversary has some effect on the performance of the event-\nbased detector. Figure 16 shows the performance of the\nevent-based detector while observing the traffic of different\nSIM applications for 15 minutes as adversary\u2019s traffic is\ntunneled through a VPN server located in Japan. Comparing\nthis figure with Figure 12 shows how the location of the\nadversary has some effect on the performance of the event-\nbased algorithm while the algorithm still has its lowest\nperformance on Signal.6.5 Comparison with Deep Learning Techniques\nAs mentioned earlier in Section 3.4, the recent work\nof DeepCorr [63] uses deep learning classifiers to perform\nflow correlation attacks on Tor. They demonstrate that deep\nlearning classifiers outperform statistical correlation tech-\nniques, like the ones we used in our work, in correlating\nTor connections. In this section, we compare our IM clas-\nsifiers with deep learning classifiers. As we show in the\nfollowing, when the SIM service has not deployed effective\nobfuscation, our statistical classifiers outperform deep-learning-\nbased classifiers , especially for shorter flow observations.\nIntuitively, this is due to the sparsity of events in typical IM\ncommunications, as well as the stationary nature of noise in\nunobfuscated IM communications in contrast to the scenario\nof Tor. Note that this fully complies with Nasr et al. [63]\u2019s\nobservation that DeepCorr only outperforms statistical clas-\nsifiers in non-stationary noisy conditions, where statistical\ntraffic models become inaccurate.\nFor fair comparisons, we obtain the original code of\nDeepCorr [63], and adjust it to the specific setting of IM\ntraffic. Specifically, we divide the timing of each flow to\nequal periods of length 1second, and in each period we\nassign values of {0,1}to that period. We set the value\nof a period 1if there is a burst of packets in that period,\nand0if there is no burst of packets. As an example, if we\nuse 15 minutes of traffic flows for correlation, our feature\ndimension is a 900-length vector with values of 0,1.\nWe design a DeepCorr model for each SIM using its\ncollected data. Figures 17 and 18 show the ROC curves of\nour event-based detector compared with our deep-learning-\nbased detector, using 3and15minutes of Wickr and Signal\ntraffic, respectively. As we can see, in case of Wickr, our\nevent-based technique outperforms the deep-learning-based\nclassifier for smaller false positive rates. For instance, for\na false positive rate of 10\u22123when using 15 minutes of\ntraffic, our event-based detector achieves a 98% accuracy\ncompared to 95% of the DeepCorr-based technique. We see\nthat the performance advantage of our event-based detector\nsignificantly increases for shorter flow observations, e.g.,\nwhen 3 minutes of traffic is used for detection, our classifier\nprovides 93% accuracy compared to 62% of the DeepCorr-\nbased classifier (for the a false positive rate of 10\u22123).\nOn the other hand, for Signal, when 3 minutes of traffic isThis article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "This article evaluates the performance of an event-based algorithm for flow correlation attacks on instant messaging (IM) services. The experiments were conducted on four different IM services: Wickr, Telegram, Signal, and WhatsApp. The performance was evaluated based on different factors such as bandwidth, SIMs, and adversary's location. The results show that the event-based algorithm outperforms deep learning classifiers, especially for shorter flow observations. The article concludes that the event-based algorithm is effective in correlating flows and detecting traffic patterns in IM services.",
                    "children": []
                },
                {
                    "id": "lastsummer.p13",
                    "title": "Performance and Countermeasures for Traffic Analysis-Based Attacks on SIM Services",
                    "content": "13\n10\u2212310\u2212210\u22121\n100\nFalse Positive Rate0.00.20.40.60.81.0True Positive Rate\nWire - no limit\nWire - 10Mbps BW\nWire - 5Mbps BW\nSignal - no limit\nSignal - 10Mbps BW\nSignal - 5Mbps BW\nFig. 14: Performance of the event-\nbased detector on Signal and Wire\nSIMs with different bandwidth limits\n(15 mins of observed traffic).\n10\u2212310\u2212210\u22121\n100\nFalse Positive Rate0.00.20.40.60.81.0True Positive Rate\nNo VPN\nTurkey\nJapan\nSouth AfricaFig. 15: Performance of the event-\nbased detector on Signal when tun-\nneling traffic through different VPN\nserver locations (15 mins of observed\nSignal traffic).\n10\u2212410\u2212310\u2212210\u22121100\nFalse Positive Rate0.00.20.40.60.81.0True Positive Rate\nWickr\nTelegram\nSignal\nWire\nWhatsAppFig. 16: Performance of the event-\nbased detector on different SIMs\nwhen tunneling traffic through the\nVPN located in Japan (15 mins of\nobserved traffic).\n0.0 0.2 0.4 0.6 0.8 1.00.250.500.751.00\nEvent-based detector (3 minutes of traffic)\ndeepcorr 180\n010\u2212510\u22124\n10\u2212310\u2212210\u22121\n100\nFalse Positive Rate0.00.51.0\nEvent-based detector (15 minutes of traffic)\ndeepcorr 900True Positive Rate\nFig. 17: Comparing our event-based detector with a\nDeepCorr-based classifier, for 3 and 15 mins of observed\nWickr traffic.\n0 10\u2212510\u22124\n10\u2212310\u2212210\u22121\n1000.250.500.751.00\nEvent-based detector (3 minutes of traffic)\nDeepCorr (3 minutes of traffic)\n0 10\u2212510\u22124\n10\u2212310\u2212210\u22121\n100\nFalse Positive Rate0.00.51.0\nEvent-based detector (15 minutes of traffic)\nDeepCorr (15 minutes of traffic)True Positive Rate\nFig. 18: Comparing our event-based detector with a\nDeepCorr-based classifier, for 3 and 15 mins of observed\nSignal traffic.\nused for detection, DeepCorr provides a FP rate of 1.9\u00d710\u22124\ncompared to 5.4\u00d710\u22123of our classifier (for the TP rates of\n60% and58% respectively). With 15 minutes of Signal traffic,\nDeepCorr provides a TP rate of 99% compared to 95% of our\nclassifier (for a FP rate of 1.4\u00d710\u22122). In contrast with Wickr,\non Signal, the deep-learning-based technique is performing\nbetter than the event-based detector. We believe this isbecause it can capture the noise in the traffic caused by the\nSignal obfuscation mechanisms as mentioned in Section 6.2.\nFurthermore, we train a DeepCorr model on the aggre-\ngated data of all SIMs. We then test this aggregated model\non the test data of each SIM. Figure 22 compares the per-\nformance of the aggregated model with individual models\ntrained on Wickr, Wire, and Signal traffics. We see that the\naggregated model has a similar performance compared to\nthe models trained on each dataset separately.\nTemporal Constraints: According to [63], DeepCorr learns\nthe generic features of noise in Tor, regardless of the specific\ncircuits and end-hosts during the training process. There-\nfore, there could be a need to re-train the DeepCorr model\ntrained on SIM traffic if the generic features of noise of a\nSIM application change. Examples of such a change can be\nif a SIM starts to use a new encoding or a new compression\nalgorithm for their text or media message. We believe this\ntype of change to be infrequent.\n7 C OUNTERMEASURES\nWe deploy and evaluate possible countermeasures\nagainst our presented attacks. Intuitively, our attacks work\nbecause in-the-wild SIM services do not obfuscate traffic\npatterns enough. Therefore, we investigate various traffic\nobfuscation mechanisms as countermeasures against our\ntraffic analysis-based attacks.\nNote that obfuscation-based countermeasures have been\nstudied against other kinds of traffic analysis attacks\noverviewed in Section 3.4. There are several key ideas used\nin existing countermeasures: (1) tunneling traffic through\nan overlay system that perturbs its patterns [57], [68], e.g.,\nTor, (2) adding background traffic (also called decoy) that\nis mixed with the target traffic [30], [56], [72], [103], [115],\n(3) padding traffic events (e.g., packets) [18], [19], [30], [48],\n[102], and (4) delaying traffic events [18], [19], [30], [102],\n[103]. In the following, we investigate various countermea-\nsure techniques inspired by these standard approaches.\n7.1 Tunneling Through Circumvention Systems\nWith/Without Background Traffic\nAs the first countermeasure, we tunnel SIM traffic\nthrough standard circumvention systems, in particular VPNThis article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "This article presents a study on the performance and countermeasures for traffic analysis-based attacks on SIM services. The study evaluates the performance of an event-based detector on Signal and Wire SIMs with different bandwidth limits and when tunneling traffic through different VPN server locations. The study also compares the event-based detector with a DeepCorr-based classifier for Wickr and Signal traffics. The results show that the event-based detector performs better on Wickr, while the deep-learning-based technique performs better on Signal. Possible countermeasures against traffic analysis-based attacks are also investigated, including tunneling traffic through circumvention systems, adding background traffic, padding traffic events, and delaying traffic events.",
                    "children": []
                },
                {
                    "id": "lastsummer.p14",
                    "title": "IMProxy: An Obfuscation Proxy Designed for IM Services",
                    "content": "14\n10\u2212310\u2212210\u22121\nFalse Positive Rate0.30.40.50.60.70.80.91.0True Positive Rate\nNo Circumvention System\nTor (web browsing traffic)\nVPN (web browsing traffic)\nTor (IAT mode)\nVPN\nTor\nFig. 19: The impact of various coun-\ntermeasures on the performance of\nthe event-based detector using dif-\nferent circumvention systems (15\nminutes of observed Telegram traf-\nfic)\n10\u2212210\u22121\n100\nFalse Positive Rate0.00.20.40.60.81.0True Positive Rate\nNo delay\n1/\u03bb=0.05s\n1/\u03bb=0.08sFig. 20: Randomly delaying events\nby an SIM server acts as an effective\ncountermeasure to our attacks.1\n\u03bbis\nthe mean of the added delay in sec-\nonds (15 minutes of observed Wire\ntraffic)\n10\u2212310\u2212210\u22121\nFalse Positive Rate0.50.60.70.80.91.0True Positive Rate\nNo delay\nrpadding=0.1\nrpadding=0.25\nrpadding=0.5\nrpadding=0.75\nrpadding=1Fig. 21: Padding IM events by the\nSIM server (or client) can act as\nan effective countermeasure against\nour attacks. (15 minutes of observed\nTelegram traffic)\nand Tor pluggable transports [98]. We use the same ex-\nperimental setup as before and connect to 300 Telegram\nchannels. For each circumvention system, we perform the\nexperiments with and without any background traffic. In the\nexperiments with background traffic, the VM running the\nSIM software also makes HTTP connections using Selenium.\nThe background HTTP webpages are picked randomly from\nthe top 50,000 Alexa websites. To amplify the impact of the\nbackground traffic, the time between every two consecutive\nHTTP GETs is taken from the empirical distribution of\nTelegram IMDs, therefore producing a noise pattern similar\nto actual SIM channels.\nWe observe that our event-based attack performs stronger\nagainst our countermeasures . Therefore, we only present the\ncountermeasure results against the event-based detector.\nFigure 19 shows the ROC curve of the event-based detector\nusing various circumvention systems and in different set-\ntings. Our Tor experiments are done once with regular Tor,\nand once using the obfs4 [68] transport with the IAT mode\nof 1, which obfuscates traffic patterns.\nWe see that using regular Tor (with no additional obfusca-\ntion) as well as using VPN does not significantly counter our\nattacks , e.g., we get a TP of 85% and a FP of 5\u00d710\u22123when\ntunneling through these services (using 15 mins of traffic).\nHowever, adding background traffic when tunneled through\nTor and VPN reduces the accuracy of the attack, but we get\nthe best countermeasure performance using Tor\u2019s obfs4 obfuscator .\nNote that tunneling through a generic circumvention\nsystem like Tor is not the most attractive countermeasure\nto the users due to the poor connection performance of such\nsystems.\n7.2 IMProxy: An Obfuscation Proxy Designed for IM\nServices\nWe design a proxy-based obfuscation system, called\nIMProxy, built specifically for IM communications. IMProxy\ncombines two obfuscation techniques: changing the timing\nof events (by adding delays), and changing the sizes of\nevents through adding dummy traffic. An IM client has\nthe ability to enable each of these countermeasures, and\nspecify the amplitude of obfuscation to make her desired\n10\u2212610\u2212510\u22124\n10\u2212310\u2212210\u2212101\naggregared model on Wickr\nWickr model\n10\u2212610\u2212510\u22124\n10\u2212310\u2212210\u221210.51.0\naggregated model on Wire\nWire model\n10\u2212610\u2212510\u22124\n10\u2212310\u2212210\u22121\nFalse Positive Rate0.51.0\naggregated model on Signal\nSignal modelTrue Positive RateFig. 22: Comparing the aggregated model trained on all the\ndata with models trained on each SIM\u2019s dataset\ntradeoff between performance and resilience. IMProxy does\nnot require any cooperation from IM providers , and can be used\nto obfuscate any IM service .\nComponents of IMProxy: Figure 23 shows the design of\nIMProxy. For a client to use IMProxy, she needs to install\na local proxy software. local proxy runs a SOCKS5 proxy\nlistening on a local port. The client will need to change the\nsetting of her IM software (e.g., Telegram software) to use\nthis local port for proxying or use a proxy that can filter out\nIM software packets.\nA second component of IMProxy is remote proxy, which\nis a SOCKS5 proxy residing outside of the surveillance area.\nThe client needs to enter the (IP , port) information of this\nremote proxy in the settings of her local proxy software.\nNote that, in practice, remote proxy can be either run by the\nclient herself (e.g., as an AWS instance), or can be run by\nthe IM provider or trusted entities (similar to the MTProto\nproxies run for Telegram users [61]).\nHow IMProxy works: Once an IM client sets up her system\nto use IMProxy as above, her IM traffic to/from the IM\nservers will go through proxy servers of IMProxy, as shown\nin Figure 23. The IM traffic of the client will be handled\nby local proxy and remote proxy, which obfuscate traffic\nthrough padding and delaying.This article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "IMProxy is a proxy-based obfuscation system designed for IM communications that combines two obfuscation techniques: changing the timing of events and changing the sizes of events through adding dummy traffic. The system does not require any cooperation from IM providers and can be used to obfuscate any IM service. IMProxy can be used to counteract event-based attacks, and it has been shown to be more effective than other circumvention systems, such as Tor and VPN, in reducing the accuracy of these attacks. IMProxy is an effective countermeasure against event-based attacks and can be used to obfuscate any IM service.",
                    "children": []
                },
                {
                    "id": "lastsummer.p15",
                    "title": "IMProxy: A Countermeasure Against Traffic Analysis Attacks on Instant Messaging Services",
                    "content": "15\nSIM Server\nSender\n(Admin)\nLocal Proxy\nRemote Proxy\nReceiver\n(Member)\nRemote Proxy\nLocal ProxyPadding\nPacketsRemoving\nPadded\nPacketsPadding\nPackets\nDelaying\nEventsRemoving\nPadded\nPackets\nNon-Observable\nby Adversary\nAdversary\nWatching\nAdversary\nWatching\nFig. 23: Design of our IMProxy countermeasure.\nAs shown in the figure, IMProxy acts differently on\nupstream and downstream IM traffic. For upstream SIM\ncommunications (e.g., messages sent by an admin), local\nproxy adds padding to the traffic by injecting dummy\npackets and events at certain times. First, some dummy\npackets are injected close to the events in order to change\ntheir sizes. The size of padding for each event is chosen\nrandomly, following a uniform distribution in [0, rpadding ],\nwhere rpadding is a parameter adjusted by each user. Sec-\nond, some dummy events (burst of packets) are injected\nduring the silence intervals; this is done randomly: during\neach 1 second silence interval, an event is injected with a\nprobability ppadding , where ppadding is also adjusted by each\nindividual user. The size of dummy events is drawn from\nthe empirical distribution of the sizes of image messages, as\npresented earlier. Finally, the dummy packets are removed\nby remote proxy before getting forwarded to the IM server.\nNote that all traffic between local proxy and remote proxy\nis encrypted so the adversary can not identify the dummy\npackets.\nFor downstream SIM communications (e.g., messages re-\nceived by a member), remote proxy adds dummy packets, as\nabove, which are then dropped by local proxy before being\nreleased to the client\u2019s IM software. In addition to padding,\nremote proxy delays the packets in the downstream traffic.\nIn our implementation, remote proxy uses an Exponential\nDistribution with rate \u03bbto generate random delays (which\nis based on our delay model in Figure 5). Note that no delay\nis applied on upstream traffic, as the delay will transit to\nthe corresponding downstream traffic. Also, note that each\nclient can control the intensity of padding by adjusting the\nppadding andrpadding parameters, and control the amplitude\nof delays by adjusting \u03bb.\nTo implement the delaying of packets, we used the\nNetFilterQueue and scapy modules in Python. To evaluate\nthe effects of addition and removal of dummy packets and\npadding, we run a simulation using traffic collected without\nthe use of IMProxy.\nEvaluation against oblivious adversary: We first evaluate\nour IMProxy implementation against an adversary who is\nnot aware of how IMProxy works (or its existence). To do\nso, we evaluate IMProxy against our event-based detector.\nFigure 20 shows the ROC curve of the event-based\ndetector for different values of \u03bb. Note that1\n\u03bbdefines the\naverage amount of delay added to the packets. As we can\nsee, increasing the added delay (by reducing \u03bb) reduces the\nperformance of our attack , as it causes to missalign events\nacross the monitored flows. For instance, a1\n\u03bb= 0.05sreduces the adversary\u2019s TP from 90% to2%(for a constant\n18\u00d710\u22124false positive).\nFigure 21 shows the ROC curves for the simulation\nof the event-based detector with different rpadding and\nppadding = 10\u22124. Note that a ppadding = 10\u22124causes a\n7%average traffic overhead. As expected, increasing rpadding\nreduces the performance of our attack ; even a rpadding as small\nof10% and7%of dummy events can have a noticeable\nimpact on countering the traffic analysis attacks, i.e., for a\n10\u22123false positive rate, the detection accuracy is reduced\nfrom 93% to62% . Increasing rpadding to50% will further\nreduce detection accuracy to 56% .\nEvaluation against IMProxy-aware adversary: Next, we\nevaluate IMProxy against an adversary who is aware that\ntarget users are deploying IMProxy and also knows the\ndetails of IMProxy. Our adversary trains a DeepCorr-based\nclassifier on IM traffic obfuscated using IMProxy (note that\nour statistical detectors will suffer for such an adversary due\nto the randomness of IMProxy\u2019s obfuscation).\nFigure 24 shows the performance of this DeepCorr-\nbased classifier against IMProxy-obfuscated connections on\nTelegram (each flow is 15 mins). We use rpadding = 0.1and\nevaluate the performance for different values of ppadding .\nAs can be seen, IMProxy is highly effective even against an\nIMProxy-aware classifier , demonstrating IMProxy\u2019s efficiency\nin manipulating IM traffic patterns. For instance, for a false\npositive rate of 10\u22123, the IMProxy-aware classifier provides\ntrue positive rates of 25% and15% (for average obfuscation\ndelays of 0.5and1), which is significantly weaker compared\nto93% of the event-based detector when IMProxy is not\ndeployed. As we can see, delaying provides better pro-\ntection than padding; however, we expect that most users\nwill prefer padding over delays due to the latency-sensitive\nnature of IM communications.\nNote that each user tradeoffs between privacy protection\nand overhead by adjusting the countermeasure parameters.\nIdeally, the countermeasure software can ask the user her\ntolerable padding/delay overhead (or her target FP/FN\nfor the adversary), and then will choose the best counter-\nmeasure parameters for the user. For instance, based on\nFigure 24, assuming that a real-world adversary can tolerate\na FP of 10\u22123, if the user states that she intends to keep\nthe adversary\u2019s TP below 0.3, the countermeasure software\ndelays packets with an average of 1s.\n8 C ONCLUSIONS\nIn this paper, we showed how popular IM applications\nleak sensitive information about their clients to adversaries\nwho merely monitor encrypted traffic. Specifically, we de-\nvised traffic analysis attacks that enable an adversary to\nidentify the administrators and members of target IM chan-\nnels with practically high accuracies. We demonstrated the\npracticality of our attacks through extensive experiments on\n5 real-world IM systems. We believe that our study presents\na significant, real-world threat to the users of such services\ngiven the escalating attempts by oppressive governments in\ncracking down on social media.\nWe also investigated the use of standard countermea-\nsures against our attacks and demonstrated their practical\nfeasibility at the cost of communication overhead and in-\ncreased IM latency. We designed and implemented an open-This article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "IMProxy is a countermeasure against traffic analysis attacks on instant messaging services. It adds padding to upstream SIM communications and dummy packets to downstream SIM communications, which are then dropped by local proxy before being released to the client\u2019s IM software. Additionally, remote proxy delays the packets in the downstream traffic. IMProxy is highly effective even against an IMProxy-aware classifier, demonstrating its efficiency in manipulating IM traffic patterns. The countermeasure software can ask the user her tolerable padding/delay overhead and then choose the best countermeasure parameters for the user. The study presents a significant, real-world threat to the users of such services given the escalating attempts by oppressive governments in cracking down on social media.",
                    "children": []
                },
                {
                    "id": "lastsummer.p16",
                    "title": "Evaluating Traffic Obfuscation Techniques for Instant Messaging Services",
                    "content": "16\n10\u2212310\u2212210\u22121\nFalse Positive Rate0.20.40.60.81.0True Positive Rate\nPadded flows (ppadding=10\u22124)\nPadded flows (ppadding=5*10\u22124)\nDelayed flows (1/\u03bb=0.5s)\nDelayed flows (1/\u03bb=1s)\nNo delay\nFig. 24: Evaluating IMProxy against an IMProxy-aware clas-\nsifier (trained using DeepCorr).\nsource, publicly available countermeasure system, IMProxy,\nwhich works for major IM services with no need to support\nfrom the IM providers. While IMProxy may be used as an\nad hoc, short-term countermeasure by IM users, we believe\nthat to achieve the best usability and user adoption, effective\ncountermeasures should be deployed by IM providers (i.e.,\nthrough integrating traffic obfuscation techniques into their\nsoftware). We hope that our study will urge IM providers to\ntake action.\nACKNOWLEDGMENTS\nThis work has been supported by the NSF grants 1953786\nand 1564067, and by DARPA and NIWC under contract\nN66001-15-C-4067. The U.S. Government is authorized to\nreproduce and distribute reprints for governmental pur-\nposes notwithstanding any copyright notation thereon. The\nviews, opinions, and/or findings expressed are those of the\nauthor(s) and should not be interpreted as representing the\nofficial views or policies of the Department of Defense or\nthe U.S. Government.\nREFERENCES\n[1] \u201cAbout end-to-end encryption,\u201d https:\n//faq.whatsapp .com/791574747982248 /, 2022.\n[2] \u201cContinued Arrest of Telegram Channels Admin in Oru-\nmiyeh,\u201d http: //kurdistanhumanrights .net/en/continued-arrest-\nof-telegram-channels-admin-in-orumiyeh /, 2018.\n[3] \u201cAdmins of 12 Reformist Telegram Channels Ar-\nrested in Iran Ahead of May 2017 Election,\u201d https:\n//www .iranhumanrights .org/2017/03/12-reformist-telegram-\nchannel-admins-arrested /, 2017.\n[4] A. Afzal, M. Hussain, S. Saleem, M. K. Shahzad, A. T. S. Ho,\nand K.-H. Jung, \u201cEncrypted network traffic analysis of secure\ninstant messaging application: A case study of signal messenger\napp,\u201d Applied Sciences , vol. 11, no. 17, 2021. [Online]. Available:\nhttps: //www .mdpi.com/2076-3417 /11/17/7789\n[5] P . K. Aggarwal, P . Grover, and L. Ahuja, \u201cSecurity Aspect in\nInstant Mobile Messaging Applications,\u201d in RAETCS , 2018.\n[6] D. Agrawal, D. Kesdogan, and S. Penz, \u201cProbabilistic treatment\nof MIXes to hamper traffic analysis,\u201d in IEEE S&P , 2003.\n[7] R. Arratia and L. Gordon, \u201cTutorial on large deviations for the\nbinomial distribution,\u201d Bull. Math. Biol. , 1989.\n[8] J. Atkinson, M. Rio, J. Mitchell, and G. Matich, \u201cYour WiFi Is\nLeaking: Ignoring Encryption, Using Histograms to Remotely\nDetect Skype Traffic,\u201d in MILCOM , 2014.\n[9] A. Back, U. Moller, and A. Stiglic, \u201cTraffic Analysis Attacks\nand Trade-Offs in Anonymity Providing Systems,\u201d in Information\nHiding , 2001.[10] A. Balducci and J. Meredith, \u201cOlm cryptogrpahic review.\u201d NCC\nGroup PLC, Tech. Rep., 2016.\n[11] \u201cAt least 60 percent of Iran Internet bandwidth usage accounts\nfor Telegram,\u201d https: //www .isna.ir/news/96062715757, 2017.\n[12] D. Barradas, N. Santos, and L. Rodrigues, \u201cEffective detection\nof multimedia protocol tunneling using machine learning,\u201d in\nUSENIX Security , 2018.\n[13] J. Black, S. Halevi, H. Krawczyk, T. Krovetz, and P . Rogaway,\n\u201cUMAC: Fast and secure message authentication,\u201d in Crypto ,\n1999.\n[14] J. Black and P . Rogaway, \u201cCBC MACs for arbitrary-length mes-\nsages: The three-key constructions,\u201d in Crypto , 2000.\n[15] D. Bonfiglio, M. Mellia, M. Meo, D. Rossi, and P . Tofanelli,\n\u201cRevealing skype traffic: when randomness plays with you,\u201d in\nSIGCOMM CCR , 2007.\n[16] N. Borisov, I. Goldberg, and E. Brewer, \u201cOff-the-record Commu-\nnication, or, Why Not to Use PGP,\u201d in WPES , 2004.\n[17] \u201cSecure P2P Messenger Releases First Version, Receives New\nFunding,\u201d https: //briarproject .org/news/2018-1 .0-released-\nnew-funding .html, 2018.\n[18] X. Cai, R. Nithyanand, and R. Johnson, \u201cCS-BuFLO: A Conges-\ntion Sensitive Website Fingerprinting Defense,\u201d in WPES , 2014.\n[19] X. Cai, R. Nithyanand, T. Wang, R. Johnson, and I. Goldberg,\n\u201cA Systematic Approach to Developing and Evaluating Website\nFingerprinting Defenses,\u201d in CSS, 2014.\n[20] X. Cai, X. C. Zhang, B. Joshi, and R. Johnson, \u201cTouching from a\nDistance: Website Fingerprinting Attacks and Defenses,\u201d in CCS ,\n2012.\n[21] Y.-C. Chang, K.-T. Chen, C.-C. Wu, and C.-L. Lei, \u201cInferring\nspeech activity from encrypted Skype traffic,\u201d in GLOBECOM ,\n2008.\n[22] S. Chen, R. Wang, X. Wang, and K. Zhang, \u201cSide-channel leaks\nin web applications: A reality today, a challenge tomorrow,\u201d in\nIEEE S&P , 2010.\n[23] T. Chothia and A. Guha, \u201cA statistical test for information leaks\nusing continuous mutual information,\u201d in CSF, 2011.\n[24] C. Cimpanu, \u201cHong Kong protesters warn of Tele-\ngram feature that can disclose their identities,\u201d\nhttps: //www .zdnet .com/article /hong-kong-protesters-warn-\nof-telegram-feature-that-can-disclose-their-identities /, 2019.\n[25] S. E. Coull and K. P . Dyer, \u201cTraffic Analysis of Encrypted Mes-\nsaging Services: Apple iMessage and Beyond,\u201d SIGCOMM CCR ,\n2014.\n[26] G. Danezis, \u201cThe traffic analysis of continuous-time mixes,\u201d in\nPETS , 2004.\n[27] G. Danezis and A. Serjantov, \u201cStatistical disclosure or intersection\nattacks on anonymity systems,\u201d in Information Hiding , 2004.\n[28] R. Dingledine, N. Mathewson, and P . Syverson, \u201cTor: The Second-\ngeneration Onion Router,\u201d in USENIX Security , 2004.\n[29] D. L. Donoho, A. G. Flesia, U. Shankar, V . Paxson, J. Coit,\nand S. Staniford, \u201cMultiscale Stepping-Stone Detection: Detecting\nPairs of Jittered Interactive Streams by Exploiting Maximum\nTolerable Delay,\u201d in RAID , 2002.\n[30] K. P . Dyer, S. E. Coull, T. Ristenpart, and T. Shrimpton, \u201cPeek-a-\nBoo, I Still See You: Why Efficient Traffic Analysis Countermea-\nsures Fail,\u201d in IEEE S&P , 2012.\n[31] J. Engler and C. Marie, \u201cSecure messaging for normal\npeople,\u201d NCC Group, Tech. Rep., 2015. [Online].\nAvailable: https: //www .nccgroup .trust/globalassets /our-\nresearch /us/whitepapers /secure-messaging-for-normal-people-\nwhitepaper .pdf\n[32] K. Ermoshina, F. Musiani, and H. Halpin, \u201cEnd-to-End Encrypted\nMessaging Protocols: An Overview,\u201d in INSCI , 2016.\n[33] O. Flisback, \u201cStalking anyone on Telegram,\u201d https:\n//oflisback .github .io/telegram-stalking /, 2015.\n[34] J. Gu, J. Wang, Z. Yu, and K. Shen, \u201cWalls have ears: Traffic-based\nside-channel attack in video streaming,\u201d in INFOCOM , 2018.\n[35] S. Harris, CISSP All-in-One Exam Guide , 6th ed. McGraw-Hill\nOsborne Media, 2012.\n[36] J. Hayes and G. Danezis, \u201ck-fingerprinting: A robust scalable\nwebsite fingerprinting technique,\u201d in USENIX Security , 2016.\n[37] G. He, M. Yang, X. Gu, J. Luo, and Y. Ma, \u201cA novel active\nwebsite fingerprinting attack against Tor anonymous system,\u201d\ninCSCWD , 2014.\n[38] T. He and L. Tong, \u201cDetecting Encrypted Stepping-Stone Connec-\ntions,\u201d TSP, 2007.This article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "This study evaluates the effectiveness of the IMProxy countermeasure system against IM traffic analysis attacks. The study shows that IMProxy can reduce the success rate of these attacks, but it is not a long-term solution. Instead, the study urges IM providers to integrate traffic obfuscation techniques into their software and highlights the need for effective countermeasures to be deployed by IM providers. The study was supported by NSF grants and DARPA and NIWC under contract.",
                    "children": []
                },
                {
                    "id": "lastsummer.p17",
                    "title": "Attacks on Privacy-Enhancing Technologies and the Use of Messaging Apps in Censored Countries",
                    "content": "17\n[39] D. Herrmann, R. Wendolsky, and H. Federrath, \u201cWebsite finger-\nprinting: attacking popular privacy enhancing technologies with\nthe multinomial naive-bayes classifier,\u201d in CCSW , 2009.\n[40] A. Houmansadr and N. Borisov, \u201cThe need for flow fingerprints\nto link correlated network flows,\u201d in PETS , 2013.\n[41] A. Houmansadr, N. Kiyavash, and N. Borisov, \u201cRAINBOW: A\nRobust And Invisible Non-Blind Watermark for Network Flows,\u201d\ninNDSS , 2009.\n[42] \u2014\u2014, \u201cNon-blind watermarking of network flows,\u201d IEEE TON ,\n2014.\n[43] \u201cNumber of mobile phone messaging app\nusers worldwide from 2016 to 2021,\u201d https:\n//www .statista .com/statistics /483255 /number-of-mobile-\nmessaging-users-worldwide, 2018.\n[44] \u201cGetting around Iran\u2019s Telegram ban,\u201d https:\n//observers .france24 .com/en/20180502-getting-around-iran\u2019-\ntelegram-ban-\u201di-installed-vpn-old-lady-next-door\u201d, 2018.\n[45] \u201c Help users in Iran reconnect to Signal,\u201d https:\n//signal .org/blog/help-iran-reconnect /, 2021.\n[46] C. Johansen, A. Mujaj, H. Arshad, and J. Noll, \u201cComparing\nImplementations of Secure Messaging Protocols (long version),\u201d\n2017.\n[47] M. Juarez, S. Afroz, G. Acar, C. Diaz, and R. Greenstadt, \u201cA\ncritical evaluation of website fingerprinting attacks,\u201d in CCS ,\n2014.\n[48] M. Juarez, M. Imani, M. Perry, C. Diaz, and M. Wright, \u201cToward\nan Efficient Website Fingerprinting Defense,\u201d in ESORICS , 2016.\n[49] D. Kales, C. Rechberger, T. Schneider, M. Senker, and C. Weinert,\n\u201cMobile private contact discovery at scale,\u201d in USENIX Security ,\n2019.\n[50] D. Kedogan, D. Agrawal, and S. Penz, \u201cLimits of anonymity in\nopen environments,\u201d in Information Hiding , 2002.\n[51] \u201cInformation leak from chat group. How do we\nfind out which user is sharing information? ,\u201d https:\n//security .stackexchange .com/questions /178435 /information-\nleak-from-chat-group-how-do-we-find-out-which-user-is-\nsharing \\-infor, 2018.\n[52] B. N. Levine, M. K. Reiter, C. Wang, and M. Wright, \u201cTiming\nattacks in low-latency mix systems,\u201d in FC, 2004.\n[53] Z. Ling, J. Luo, W. Yu, X. Fu, D. Xuan, and W. Jia, \u201cA new cell-\ncounting-based attack against Tor,\u201d IEEE TON , 2012.\n[54] Y. Liu, D. Ghosal, F. Armknecht, A.-R. Sadeghi, S. Schulz, and\nS. Katzenbeisser, \u201cRobust and undetectable steganographic tim-\ning channels for i.i.d. traffic,\u201d in Information Hiding , R. B \u00a8ohme,\nP . W. L. Fong, and R. Safavi-Naini, Eds. Berlin, Heidelberg:\nSpringer Berlin Heidelberg, 2010, pp. 193\u2013207.\n[55] L. Lu, E.-C. Chang, and M. C. Chan, \u201cWebsite fingerprinting\nand identification using ordered feature sequences,\u201d in ESORICS ,\n2010.\n[56] X. Luo, P . Zhou, E. W. W. Chan, W. Lee, R. K. C. Chang, and\nR. Perdisci, \u201cHTTPOS: Sealing information leaks with browser-\nside obfuscation of encrypted flows,\u201d in NDSS , 2011.\n[57] H. M. Moghaddam, B. Li, M. Derakhshani, and I. Goldberg,\n\u201cSkypeMorph: Protocol Obfuscation for Tor Bridges,\u201d in CCS ,\n2012.\n[58] H. Mozaffari and A. Houmansadr, \u201cHeterogeneous Private In-\nformation Retrieval,\u201d in Network and Distributed Systems Security\n(NDSS) Symposium 2020 , 2020.\n[59] H. Mozaffari, A. Houmansadr, and A. Venkataramani, \u201cBlocking-\nResilient Communications in Information-Centric Networks Us-\ning Router Redirection,\u201d in 2019 IEEE Globecom Workshops (GC\nWkshps) , 2019.\n[60] \u201cMTProto Mobile Protocol,\u201d https: //core.telegram .org/mtproto.\n[61] \u201cMTProto proxy server for Telegram,\u201d https: //mtproto .co/.\n[62] S. J. Murdoch and G. Danezis, \u201cLow-cost traffic analysis of Tor,\u201d\ninIEEE S&P , 2005.\n[63] M. Nasr, A. Bahramali, and A. Houmansadr, \u201cDeepCorr: Strong\nFlow Correlation Attacks on Tor Using Deep Learning,\u201d in CCS ,\n2018.\n[64] M. Nasr, A. Houmansadr, and A. Mazumdar, \u201cCompressive\nTraffic Analysis: A New Paradigm for Scalable Traffic Analysis,\u201d\ninCCS , 2017.\n[65] L. H. Newman, \u201cENCRYPTED MESSAGING ISN\u2019T MAGIC,\u201d\nhttps: //www .wired .com/story/encrypted-messaging-isnt-\nmagic /, 2018.\n[66] \u201cNordvpn,\u201d https: //nordvpn .com/, 2021.[67] \u201cHow Many People Use Telegram in 2021? 55 Telegram Stats,\u201d\nhttps: //backlinko .com/telegram-users#telegram-statistics, 2018.\n[68] \u201c[tor-project] Turning on timing obfuscation\n(iat-mode=1) for some default bridges,\u201d https:\n//lists.torproject .org/pipermail /tor-project /2016-\nNovember /000776 .html.\n[69] J.-X. Pan and K.-T. Fang, Maximum Likelihood Estimation . New\nYork, NY: Springer New York, 2002, pp. 77\u2013158. [Online].\nAvailable: https: //doi.org/10.1007/978-0-387-21812-0 3\n[70] A. Panchenko, F. Lanze, A. Zinnen, M. Henze, J. Pennekamp,\nK. Wehrle, and T. Engel, \u201cWebsite Fingerprinting at Internet\nScale,\u201d in NDSS , 2016.\n[71] A. Panchenko, L. Niessen, A. Zinnen, and T. Engel, \u201cWebsite\nfingerprinting in onion routing based anonymization networks,\u201d\ninWPES , 2011.\n[72] \u2014\u2014, \u201cWebsite Fingerprinting in Onion Routing Based\nAnonymization Networks,\u201d in WPES , 2011.\n[73] K. Park and H. Kim, \u201cEncryption is Not Enough: Inferring User\nActivities on KakaoTalk with Traffic Analysis,\u201d in WISA , 2015.\n[74] H. V . Poor, An introduction to signal detection and estimation .\nSpringer Science & Business Media, 2013.\n[75] Y. J. Pyun, Y. H. Park, X. Wang, D. S. Reeves, and P . Ning, \u201cTracing\ntraffic through intermediate hosts that repacketize flows,\u201d in\nINFOCOM , 2007.\n[76] D. Ramsbrock, X. Wang, and X. Jiang, \u201cA first step towards live\nbotmaster traceback,\u201d in RAID , 2008.\n[77] V . Rimmer, D. Preuveneers, M. Juarez, T. V . Goethem, and\nW. Joosen, \u201cAutomated Website Fingerprinting through Deep\nLearning,\u201d in NDSS , 2018.\n[78] D. Robertson, \u201cThe Licensing and Compliance Lab interviews\nGuillaume Roguez, Ring Project Director,\u201d Free Software\nFoundation , 2016, https: //www .fsf.org/blogs/licensing /the-\nlicensing-and-compliance-lab-interviews-guillaume-roguez-\nring-project-director.\n[79] \u201cRussia orders Telegram to hand over users\u2019 encryption\nkeys,\u201d https: //www .theverge .com/2018/3/20/17142482 /russia-\norders-telegram-hand-over-user-encryption-keys, 2018.\n[80] H. Saribeykan and A. Margvelashvili, \u201cSecurity Analysis of Tele-\ngram,\u201d https: //courses .csail.mit.edu/6.857/2017/project /19.pdf,\n2017.\n[81] J. Schectman, \u201cExclusive: Messaging app Telegram\nmoves to protect identity of Hong Kong protesters,\u201d\nhttps: //www .reuters .com/article /us-hongkong-telegram-\nexclusive /exclusive-messaging-app-telegram-moves-to-protect-\nidentity-of-hong-kong-protesters-idUSKCN1VK2NI, 2019.\n[82] M. Schliep, I. Kariniemi, and N. Hopper, \u201cIs Bob Sending Mixed\nSignals?\u201d in WPES , 2017.\n[83] R. Schuster, V . Shmatikov, and E. Tromer, \u201cBeauty and the Burst:\nRemote Identification of Encrypted Video Streams,\u201d in USENIX\nSecurity , 2017.\n[84] \u201cPython Language Bindings for Selenium WebDriver,\u201d https:\n//pypi.org/project /selenium /, 2020.\n[85] V . Shmatikov and M.-H. Wang, \u201cTiming analysis in low-latency\nmix networks: Attacks and defenses,\u201d in ESORICS , 2006.\n[86] \u201cSignal,\u201d https: //signal .org/en/, 2021.\n[87] \u201cThe Inside Story of How Signal Became the Private Mes-\nsaging App for an Age of Fear and Distrust,\u201d https:\n//time.com/5893114 /signal-app-privacy /, 2020.\n[88] \u201cSignal-cli, an unofficial commandline and dbus\ninterface for signalapp/libsignal-service-java,\u201d https:\n//github .com/AsamK /signal-cli, 2021.\n[89] \u201cWhy messaging app Signal is surging in popularity right\nnow,\u201d https: //www .cnn.com/2021/01/12/tech/signal-growth-\nwhatsapp-confusion /index .html, 2021.\n[90] \u201cTechnology preview: Sealed sender for Signal,\u201d https:\n//signal .org/blog/sealed-sender /, 2018.\n[91] \u201cMost popular mobile messaging apps worldwide as of\nJanuary 2018, based on number of monthly active users,\u201d\nhttps: //www .statista .com/statistics /258749 /most-popular-\nglobal-mobile-messenger-apps, 2018.\n[92] T. Simonite, \u201cFireChat Could Be the First in a Wave of Mesh\nNetworking Apps,\u201d MIT Technology Review , 2014. [Online].\nAvailable: https: //www .technologyreview .com/s/525921 /the-\nlatest-chat-app-for-iphone-needs-no-internet-connection /\n[93] Y. Sun, A. Edmundson, L. Vanbever, O. Li, J. Rexford, M. Chiang,\nand P . Mittal, \u201cRAPTOR: routing attacks on privacy in tor,\u201d in\nUSENIX Security , 2015.This article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "This text discusses various attacks on privacy-enhancing technologies, such as website fingerprinting and flow correlation attacks, and the need for defenses against them. It also covers the use of messaging apps, such as Telegram and Signal, in countries with internet censorship and the potential vulnerabilities of these apps to traffic analysis attacks. The article concludes with a discussion of the importance of privacy in today's society and the need for continued research and development of privacy-enhancing technologies.",
                    "children": []
                },
                {
                    "id": "lastsummer.p18",
                    "title": "Privacy, Security, and Traffic Analysis in Network Communications",
                    "content": "18\n[94] V . F. Taylor, R. Spolaor, M. Conti, and I. Martinovic, \u201cRobust\nsmartphone app identification via encrypted network traffic anal-\nysis,\u201d TIFS , 2017.\n[95] \u201cWhat is Telegram? What do I do here?\u201d https:\n//telegram .org/faq, 2013.\n[96] \u201cWhere is Telegram based?\u201d https: //telegram .org/faq, 2013.\n[97] \u201cTelegram and Instagram being restricted in Iran,\u201d\nhttps: //techcrunch .com/2018/01/02/telegram-and-instagram-\nbeing-restricted-in-iran, 2018.\n[98] \u201cTor: Pluggable Transports,\u201d https:\n//www .torproject .org/docs/pluggable-transports .html.en.\n[99] \u201cTorgaurd,\u201d https: //torguard .net/, 2020.\n[100] N. Unger, S. Dechand, J. Bonneau, S. Fahl, H. Perl, I. Goldberg,\nand M. Smith, \u201cSoK: Secure Messaging,\u201d in IEEE S&P , 2015.\n[101] \u201cVirtual Private Networking: An Overview,\u201d Microsoft\nTechnet, Tech. Rep., 2011. [Online]. Available: https:\n//docs.microsoft .com/en-us /previous-versions /windows /it-\npro/windows-2000-server /bb742566(v=technet .10)\n[102] T. Wang, X. Cai, R. Nithyanand, R. Johnson, and I. Goldberg,\n\u201cEffective Attacks and Provable Defenses for Website Finger-\nprinting,\u201d in USENIX Security , 2014.\n[103] T. Wang and I. Goldberg, \u201cWalkie-Talkie: An Efficient Defense\nAgainst Passive Website Fingerprinting Attacks,\u201d in USENIX\nSecurity , 2017.\n[104] X. Wang, S. Chen, and S. Jajodia, \u201cTracking Anonymous Peer-to-\npeer VoIP Calls on the Internet,\u201d in CCS , 2005.\n[105] \u2014\u2014, \u201cNetwork flow watermarking attack on low-latency anony-\nmous communication systems,\u201d in IEEE S&P , 2007.\n[106] X. Wang, D. S. Reeves, and S. F. Wu, \u201cInter-packet delay based\ncorrelation for tracing encrypted connections through stepping\nstones,\u201d in ESORICS , 2002.\n[107] \u201cWhatsApp,\u201d https: //www .whatsapp .com/, 2020.\n[108] \u201cWickr,\u201d https: //wickr .com/, 2021.\n[109] \u201cWickr IO,\u201d https: //wickrinc .github .io/wickrio-docs /#wickr-io,\n2020.\n[110] \u201cWire,\u201d https: //wire.com/en/, 2020, 2021.\n[111] \u201cWire Web Application,\u201d https: //app.wire.com, 2020, 2021.\n[112] \u201cWondershaper,\u201d https: //github .com/magnific0 /wondershaper.\n[113] \u201cWhatsApp reveals major security flaw that\ncould let hackers access phones,\u201d https:\n//www .cnn.com/2019/05/14/tech/whatsapp-\nattack /index .html, 2019.\n[114] C. V . Wright, L. Ballard, S. E. Coull, F. Monrose, and G. M.\nMasson, \u201cUncovering Spoken Phrases in Encrypted Voice over\nIP Conversations,\u201d TISSEC , 2010.\n[115] C. V . Wright, S. E. Coull, and F. Monrose, \u201cTraffic Morphing: An\nEfficient Defense Against Statistical Traffic Analysis,\u201d in NDSS ,\n2009.\n[116] W. Yu, X. Fu, S. Graham, D. Xuan, and W. Zhao, \u201cDSSS-based\nflow marking technique for invisible traceback,\u201d in IEEE S&P ,\n2007.\n[117] Y. Zhang and V . Paxson, \u201cDetecting Stepping Stones.\u201d in USENIX\nSecurity , 2000.\n[118] Y. Zhu and R. Bettati, \u201cUnmixing Mix Traffic,\u201d in PETS , 2005.\n[119] Y. Zhu, X. Fu, B. Graham, R. Bettati, and W. Zhao, \u201cOn flow\ncorrelation attacks and countermeasures in mix networks,\u201d in\nPETS , 2004.\nArdavan Bozorgi received the B.S. degree in\nComputer Engineering from the University of\nTehran in 2018. He is currently working towards\nthe Ph.D. degree with the College of Informa-\ntion and Computer Sciences at the University\nof Massachusetts Amherst, MA, USA. His re-\nsearch interests include privacy, security, and\ntraffic analysis.\nAlireza Bahramali received the B.S. degree\nin Electrical Engineering from the University\nof Tehran in 2017, and the M.S. degree in\nComputer Science from the University of Mas-\nsachusetts Amherst in 2020. He is currently a\nPh.D. student at the University of Massachusetts\nAmherst, MA, USA, studying computer science.\nHis research interests include security and pri-\nvacy, traffic analysis, machine learning, and\nwireless communication systems.\nFateme Rezaei received B.S. degree in Com-\nputer Engineering from Sharif University of Tech-\nnology in 2015, M.S. and Ph.D. degrees in Com-\nputer Science from University of Massachusetts\nAmherst in 2021. Her research interests include\nPrivacy and Security, and Traffic Analysis. She\nis currently working at Snap Inc. as a Software\nEngineer.\nAmirhossein Ghafari received a B.S degree\nin Software Engineering from the University of\nTehran in 2018 and an M.S. degree in Computer\nScience from the University of Massachusetts\nAmherst in 2022. He is currently a Software En-\ngineer at NVIDIA, Santa Clara, CA. His research\ninterests are network security, traffic analysis,\nand censorship.\nAmir Houmansadr (Member, IEEE) received\nthe Ph.D. degree from the University of Illinois at\nUrbana\u2013Champaign in 2012. He is currently an\nAssociate Professor with the Manning College\nof Information and Computer Sciences, Univer-\nsity of Massachusetts Amherst. His broad area\nof research is network security and privacy. He\nhas received several awards, including the Best\nPractical Paper Award at the IEEE Symposium\non Security & Privacy in 2013, the Google Fac-\nulty Research Award in 2015, and the NSF CA-\nREER Award in 2016.\nRamin Soltani received the B.S. degree in Elec-\ntrical Engineering from the University of Tehran\nin 2009, M.S. degree in Electrical Engineering\nfrom the Sharif University of Technology in 2012,\nand the M.S. and Ph.D. degrees in Electrical and\nComputer Engineering from the University of\nMassachusetts Amherst, in 2019. He is currently\na Senior Engineer at Samsung Semiconductor\nInc., San Diego, CA. His research interests in-\nclude wireless communication, 5G NR, security\nand privacy, machine learning, and networking.\nDennis Goeckel (S\u201989\u2013M\u201992\u2013SM\u201904\u2013F\u201911) re-\nceived the Ph.D. degree from the University\nof Michigan in 1996. He is currently a Profes-\nsor at the Electrical and Computer Engineer-\ning Department, University of Massachusetts\nAmherst, His research interests are in physi-\ncal layer communications and wireless network\ntheory. He received the NSF CAREER Award\nin 1999 for coded modulation for high-speed\nwireless communications and the University of\nMassachusetts Distinguished Teaching Award in\n2007.\nDon Towsley (Fellow, IEEE and ACM) holds a\nPh.D. in Computer Science (1975) from Univer-\nsity of Texas. He is currently a Distinguished\nProfessor at the Manning College of Information\n& Computer Sciences,. His research interests\ninclude performance modeling and analysis, and\nquantum networking. He has received several\nachievement awards including the 2007 IEEE\nKoji Kobayashi Award and the 2011 INFOCOM\nAchievement Award.This article has been accepted for publication in IEEE Transactions on Dependable and Secure Computing. This is the author's version which has not been fully edited and \ncontent may change prior to final publication. Citation information: DOI 10.1109/TDSC.2022.3218191\n\u00a9 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\r\nSee https://www.ieee.org/publications/rights/index.html for more information.\nAuthorized licensed use limited to: Univ of  Calif San Diego. Downloaded on February 02,2023 at 05:30:03 UTC from IEEE Xplore.  Restrictions apply.",
                    "summary": "This article discusses various techniques and tools related to privacy, security, and traffic analysis in network communications. It covers topics such as encrypted network traffic analysis, secure messaging, website fingerprinting, anonymous communication systems, and flow correlation attacks. The article also introduces some defenses against these attacks, including pluggable transports, mix networks, and traffic morphing. The authors of the article are researchers and professors from the University of Massachusetts Amherst, and their research interests include privacy, security, and traffic analysis in network communications.",
                    "children": []
                }
            ]
        }
    ]
}